#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPMESSAGING_SWIFT_H
#define AEPMESSAGING_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPCore;
@import AEPServices;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPMessaging",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// <code>DecisionScope</code> class is used to create decision scopes for personalization requests to Experience Edge Network.
SWIFT_CLASS_NAMED("DecisionScope")
@interface AEPDecisionScope : NSObject
/// Decision scope name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Creates a new decision scope using the given scope <code>name</code>.
/// \param name string representation for the decision scope.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Creates a new decision scope using the given <code>activityId</code>, <code>placementId</code> and <code>itemCount</code>.
/// This initializer creates a scope name by Base64 encoding the JSON string created using the provided data.
/// If <code>itemCount</code> == 1, JSON string is
/// \code
/// {"activityId":#activityId,"placementId":#placementId}
///
/// \endcodeotherwise,
/// \code
/// {"activityId":#activityId,"placementId":#placementId,"itemCount":#itemCount}
///
/// \endcode\param activityId unique activity identifier for the decisioning activity.
///
/// \param placementId unique placement identifier for the decisioning activity offer.
///
/// \param itemCount number of offers to be returned from the server.
///
- (nonnull instancetype)initWithActivityId:(NSString * _Nonnull)activityId placementId:(NSString * _Nonnull)placementId itemCount:(NSUInteger)itemCount;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class UIView;
enum AEPMessagingEdgeEventType : NSInteger;

/// Class that contains the definition of an in-app message and controls its tracking via Experience Edge events.
SWIFT_CLASS_NAMED("Message")
@interface AEPMessage : NSObject
/// ID of the <code>Message</code>.
@property (nonatomic, copy) NSString * _Nonnull id;
/// If set to <code>true</code> (default), Experience Edge events will automatically be generated when this <code>Message</code> is
/// triggered, displayed, and dismissed.
@property (nonatomic) BOOL autoTrack;
/// Points to the message’s <code>WKWebView</code> instance, if it exists.
@property (nonatomic, readonly, strong) UIView * _Nullable view;
/// Signals to the UIServices that the message should be shown.
/// If <code>autoTrack</code> is true, calling this method will result in an “inapp.display” Edge Event being dispatched.
- (void)show;
/// Signals to the UIServices that the message should be dismissed.
/// If <code>autoTrack</code> is true, calling this method will result in an “inapp.dismiss” Edge Event being dispatched.
/// \param suppressAutoTrack if set to <code>true</code>, the “inapp.dismiss” Edge Event will not be sent regardless
/// of the <code>autoTrack</code> setting.
///
- (void)dismissSuppressingAutoTrack:(BOOL)suppressAutoTrack;
/// Generates an Edge Event for the provided <code>interaction</code> and <code>eventType</code>.
/// \param interaction a custom <code>String</code> value to be recorded in the interaction
///
/// \param eventType the <code>MessagingEdgeEventType</code> to be used for the ensuing Edge Event
///
- (void)trackInteraction:(NSString * _Nullable)interaction withEdgeEventType:(enum AEPMessagingEdgeEventType)eventType;
/// Adds a handler for Javascript messages sent from the message’s webview.
/// The parameter passed to <code>handler</code> will contain the body of the message passed from the webview’s Javascript.
/// \param name the name of the message that should be handled by <code>handler</code>
///
/// \param handler the closure to be called with the body of the message passed by the Javascript message
///
- (void)handleJavascriptMessage:(NSString * _Nonnull)name withHandler:(void (^ _Nonnull)(id _Nullable))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPFullscreenMessage;

@interface AEPMessage (SWIFT_EXTENSION(AEPMessaging)) <AEPFullscreenMessageDelegate>
- (void)onShowFullscreenMessage:(AEPFullscreenMessage * _Nonnull)_;
- (void)onShowFailure;
/// Informs the parent of the calling <code>message</code> that it has been dismissed.
/// \param message the <code>FullscreenMessage</code> being dismissed
///
- (void)onDismissFullscreenMessage:(AEPFullscreenMessage * _Nonnull)message;
/// Handles URL loading for links triggered from within the webview of the message.
/// This method checks the <code>url</code> parameter to determine if it should be handled locally or by the webview in <code>message</code>.
/// If the <code>url</code> has a scheme of “adbinapp”, the URL will be handled locally for one or more purposes:
/// <ul>
///   <li>
///     If the <code>url</code> host equals “dismiss”, the webview will be removed from its superview.
///   </li>
///   <li>
///     If the <code>url</code> has a query parameter named “interaction”, an interact event will be sent to experience edge
///     using the value provided for the “interaction” parameter.
///   </li>
///   <li>
///     If the <code>url</code> has a query parameter named “link” and its value is a valid URL, the URL will be loaded in
///     by the operating system’s default web browser (mobile Safari by default).
///   </li>
/// </ul>
/// \param message the message attempting to load a URL
///
/// \param url the URL attempting to be loaded
///
///
/// returns:
/// false if the message’s webview will handle the loading of the URL
- (BOOL)overrideUrlLoadFullscreenMessage:(AEPFullscreenMessage * _Nonnull)fullscreenMessage url:(NSString * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AEPExtensionRuntime;
@class AEPEvent;

SWIFT_CLASS_NAMED("Messaging")
@interface AEPMobileMessaging : NSObject <AEPExtension>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setExtensionVersion:(NSString * _Nonnull)value;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull friendlyName;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationResponse;

@interface AEPMobileMessaging (SWIFT_EXTENSION(AEPMessaging))
/// Sends the push notification interactions as an experience event to Adobe Experience Edge.
/// \param response UNNotificationResponse object which contains the payload and xdm informations.
///
/// \param applicationOpened Boolean values denoting whether the application was opened when notification was clicked
///
/// \param customActionId String value of the custom action (e.g button id on the notification) which was clicked.
///
+ (void)handleNotificationResponse:(UNNotificationResponse * _Nonnull)response applicationOpened:(BOOL)applicationOpened withCustomActionId:(NSString * _Nullable)customActionId;
/// Initiates a network call to retrieve remote In-App Message definitions.
+ (void)refreshInAppMessages;
@end


/// Provides mapping to XDM EventType strings needed for Experience Event requests
typedef SWIFT_ENUM_NAMED(NSInteger, AEPMessagingEdgeEventType, "MessagingEdgeEventType", open) {
  AEPMessagingEdgeEventTypeInappDismiss = 0,
  AEPMessagingEdgeEventTypeInappInteract = 1,
  AEPMessagingEdgeEventTypeInappTrigger = 2,
  AEPMessagingEdgeEventTypeInappDisplay = 3,
  AEPMessagingEdgeEventTypePushApplicationOpened = 4,
  AEPMessagingEdgeEventTypePushCustomAction = 5,
};

enum AEPOfferType : NSInteger;

/// <code>Offer</code> class
SWIFT_CLASS_NAMED("Offer")
@interface AEPOffer : NSObject
/// Unique Offer identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Offer revision detail at the time of the request
@property (nonatomic, readonly, copy) NSString * _Nonnull etag;
/// Offer schema string
@property (nonatomic, readonly, copy) NSString * _Nonnull schema;
/// Offer type as represented in enum <code>OfferType</code>
@property (nonatomic, readonly) enum AEPOfferType type;
/// Optional Offer language array
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable language;
/// Offer content string
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
/// Optional Offer characteristics dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable characteristics;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AEPOffer (SWIFT_EXTENSION(AEPMessaging))
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Interactions</code> field group from the given proposition option.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// If the proposition reference within the option is released and no longer valid, the method returns <code>nil</code>.
/// note:
/// The returned XDM data also contains the <code>eventType</code> for the Experience Event with value <code>decisioning.propositionDisplay</code>.
/// seealso:
/// <code>interactionXdm(for:)</code>
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon interactions.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)generateDisplayInteractionXdm SWIFT_WARN_UNUSED_RESULT;
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Interactions</code> field group from the given proposition option.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// If the proposition reference within the option is released and no longer valid, the method returns <code>nil</code>.
/// note:
/// The returned XDM data also contains the <code>eventType</code> for the Experience Event with value <code>decisioning.propositionInteract</code>.
/// seealso:
/// <code>interactionXdm(for:)</code>
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon interactions.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)generateTapInteractionXdm SWIFT_WARN_UNUSED_RESULT;
/// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for the given proposition item.
/// seealso:
/// <code>trackWithData(_:)</code>
- (void)displayed;
/// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the tap interaction data for the given proposition item.
/// seealso:
/// <code>trackWithData(_:)</code>
- (void)tapped;
@end

/// Enum representing the supported Offer Types.
typedef SWIFT_ENUM_NAMED(NSInteger, AEPOfferType, "OfferType", open) {
/// Unknown Offer type
  AEPOfferTypeUnknown = 0,
/// JSON Offer
  AEPOfferTypeJson = 1,
/// Plain text Offer
  AEPOfferTypeText = 2,
/// Html Offer
  AEPOfferTypeHtml = 3,
/// Image Offer
  AEPOfferTypeImage = 4,
};


SWIFT_CLASS_NAMED("Optimize")
@interface AEPMobileOptimize : NSObject <AEPExtension>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPProposition;

@interface AEPMobileOptimize (SWIFT_EXTENSION(AEPMessaging))
/// This API dispatches an Event for the Edge network extension to fetch decision propositions for the provided decision scopes from the decisioning Services enabled behind Experience Edge.
/// The returned decision propositions are cached in memory in the Optimize SDK extension and can be retrieved using <code>getPropositions(for:_:)</code> API.
/// \param decisionScopes An array of decision scopes.
///
/// \param xdm Additional XDM-formatted data to be sent in the personalization request.
///
/// \param data Additional free-form data to be sent in the personalization request.
///
+ (void)updatePropositions:(NSArray<AEPDecisionScope *> * _Nonnull)decisionScopes withXdm:(NSDictionary<NSString *, id> * _Nullable)xdm andData:(NSDictionary<NSString *, id> * _Nullable)data;
/// This API retrieves the previously fetched decisions for the provided decision scopes from the in-memory extension cache.
/// The completion handler will be invoked with the decision propositions corresponding to the given decision scopes. If a certain decision scope has not already been fetched prior to this API call, it will not be contained in the returned propositions.
/// \param decisionScopes An array of decision scopes.
///
/// \param completion The completion handler to be invoked when the decisions are retrieved from cache.
///
+ (void)getPropositions:(NSArray<AEPDecisionScope *> * _Nonnull)decisionScopes completion:(void (^ _Nonnull)(NSDictionary<AEPDecisionScope *, AEPProposition *> * _Nullable, NSError * _Nullable))completion;
/// This API registers a permanent callback which will be invoked whenever the Edge extension dispatches an Event handle,
/// upon a personalization decisions response from the Experience Edge Network.
/// The personalization query requests can be triggered by the <code>updatePropositions(for:withXdm:andData:)</code> API,
/// Edge extension <code>sendEvent(experienceEvent:_:)</code> API or launch rules consequence.
/// \param action The completion handler to be invoked with the decision propositions.
///
+ (void)onPropositionsUpdate:(void (^ _Nonnull)(NSDictionary<AEPDecisionScope *, AEPProposition *> * _Nonnull))action;
/// This API clears the in-memory propositions cache.
+ (void)clearCachedPropositions;
@end


/// <code>Proposition</code> class
SWIFT_CLASS_NAMED("Proposition")
@interface AEPProposition : NSObject
/// Unique proposition identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Array containing proposition decision options
@property (nonatomic, copy) NSArray<AEPOffer *> * _Nonnull offers;
/// Decision scope string
@property (nonatomic, readonly, copy) NSString * _Nonnull scope;
/// Scope details dictionary
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull scopeDetails;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AEPProposition (SWIFT_EXTENSION(AEPMessaging))
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Reference</code> field group from the given proposition.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// note:
/// The returned XDM data does not contain an <code>eventType</code> for the Experience Event.
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon reference.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nonnull)generateReferenceXdm SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPMESSAGING_SWIFT_H
#define AEPMESSAGING_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPCore;
@import AEPServices;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPMessaging",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// <code>DecisionScope</code> class is used to create decision scopes for personalization requests to Experience Edge Network.
SWIFT_CLASS_NAMED("DecisionScope")
@interface AEPDecisionScope : NSObject
/// Decision scope name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Creates a new decision scope using the given scope <code>name</code>.
/// \param name string representation for the decision scope.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Creates a new decision scope using the given <code>activityId</code>, <code>placementId</code> and <code>itemCount</code>.
/// This initializer creates a scope name by Base64 encoding the JSON string created using the provided data.
/// If <code>itemCount</code> == 1, JSON string is
/// \code
/// {"activityId":#activityId,"placementId":#placementId}
///
/// \endcodeotherwise,
/// \code
/// {"activityId":#activityId,"placementId":#placementId,"itemCount":#itemCount}
///
/// \endcode\param activityId unique activity identifier for the decisioning activity.
///
/// \param placementId unique placement identifier for the decisioning activity offer.
///
/// \param itemCount number of offers to be returned from the server.
///
- (nonnull instancetype)initWithActivityId:(NSString * _Nonnull)activityId placementId:(NSString * _Nonnull)placementId itemCount:(NSUInteger)itemCount;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class UIView;
enum AEPMessagingEdgeEventType : NSInteger;

/// Class that contains the definition of an in-app message and controls its tracking via Experience Edge events.
SWIFT_CLASS_NAMED("Message")
@interface AEPMessage : NSObject
/// ID of the <code>Message</code>.
@property (nonatomic, copy) NSString * _Nonnull id;
/// If set to <code>true</code> (default), Experience Edge events will automatically be generated when this <code>Message</code> is
/// triggered, displayed, and dismissed.
@property (nonatomic) BOOL autoTrack;
/// Points to the message’s <code>WKWebView</code> instance, if it exists.
@property (nonatomic, readonly, strong) UIView * _Nullable view;
/// Signals to the UIServices that the message should be shown.
/// If <code>autoTrack</code> is true, calling this method will result in an “inapp.display” Edge Event being dispatched.
- (void)show;
/// Signals to the UIServices that the message should be dismissed.
/// If <code>autoTrack</code> is true, calling this method will result in an “inapp.dismiss” Edge Event being dispatched.
/// \param suppressAutoTrack if set to <code>true</code>, the “inapp.dismiss” Edge Event will not be sent regardless
/// of the <code>autoTrack</code> setting.
///
- (void)dismissSuppressingAutoTrack:(BOOL)suppressAutoTrack;
/// Generates an Edge Event for the provided <code>interaction</code> and <code>eventType</code>.
/// \param interaction a custom <code>String</code> value to be recorded in the interaction
///
/// \param eventType the <code>MessagingEdgeEventType</code> to be used for the ensuing Edge Event
///
- (void)trackInteraction:(NSString * _Nullable)interaction withEdgeEventType:(enum AEPMessagingEdgeEventType)eventType;
/// Adds a handler for Javascript messages sent from the message’s webview.
/// The parameter passed to <code>handler</code> will contain the body of the message passed from the webview’s Javascript.
/// \param name the name of the message that should be handled by <code>handler</code>
///
/// \param handler the closure to be called with the body of the message passed by the Javascript message
///
- (void)handleJavascriptMessage:(NSString * _Nonnull)name withHandler:(void (^ _Nonnull)(id _Nullable))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPFullscreenMessage;

@interface AEPMessage (SWIFT_EXTENSION(AEPMessaging)) <AEPFullscreenMessageDelegate>
- (void)onShowFullscreenMessage:(AEPFullscreenMessage * _Nonnull)_;
- (void)onShowFailure;
/// Informs the parent of the calling <code>message</code> that it has been dismissed.
/// \param message the <code>FullscreenMessage</code> being dismissed
///
- (void)onDismissFullscreenMessage:(AEPFullscreenMessage * _Nonnull)message;
/// Handles URL loading for links triggered from within the webview of the message.
/// This method checks the <code>url</code> parameter to determine if it should be handled locally or by the webview in <code>message</code>.
/// If the <code>url</code> has a scheme of “adbinapp”, the URL will be handled locally for one or more purposes:
/// <ul>
///   <li>
///     If the <code>url</code> host equals “dismiss”, the webview will be removed from its superview.
///   </li>
///   <li>
///     If the <code>url</code> has a query parameter named “interaction”, an interact event will be sent to experience edge
///     using the value provided for the “interaction” parameter.
///   </li>
///   <li>
///     If the <code>url</code> has a query parameter named “link” and its value is a valid URL, the URL will be loaded in
///     by the operating system’s default web browser (mobile Safari by default).
///   </li>
/// </ul>
/// \param message the message attempting to load a URL
///
/// \param url the URL attempting to be loaded
///
///
/// returns:
/// false if the message’s webview will handle the loading of the URL
- (BOOL)overrideUrlLoadFullscreenMessage:(AEPFullscreenMessage * _Nonnull)fullscreenMessage url:(NSString * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AEPExtensionRuntime;
@class AEPEvent;

SWIFT_CLASS_NAMED("Messaging")
@interface AEPMobileMessaging : NSObject <AEPExtension>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setExtensionVersion:(NSString * _Nonnull)value;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull friendlyName;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationResponse;

@interface AEPMobileMessaging (SWIFT_EXTENSION(AEPMessaging))
/// Sends the push notification interactions as an experience event to Adobe Experience Edge.
/// \param response UNNotificationResponse object which contains the payload and xdm informations.
///
/// \param applicationOpened Boolean values denoting whether the application was opened when notification was clicked
///
/// \param customActionId String value of the custom action (e.g button id on the notification) which was clicked.
///
+ (void)handleNotificationResponse:(UNNotificationResponse * _Nonnull)response applicationOpened:(BOOL)applicationOpened withCustomActionId:(NSString * _Nullable)customActionId;
/// Initiates a network call to retrieve remote In-App Message definitions.
+ (void)refreshInAppMessages;
@end


/// Provides mapping to XDM EventType strings needed for Experience Event requests
typedef SWIFT_ENUM_NAMED(NSInteger, AEPMessagingEdgeEventType, "MessagingEdgeEventType", open) {
  AEPMessagingEdgeEventTypeInappDismiss = 0,
  AEPMessagingEdgeEventTypeInappInteract = 1,
  AEPMessagingEdgeEventTypeInappTrigger = 2,
  AEPMessagingEdgeEventTypeInappDisplay = 3,
  AEPMessagingEdgeEventTypePushApplicationOpened = 4,
  AEPMessagingEdgeEventTypePushCustomAction = 5,
};

enum AEPOfferType : NSInteger;

/// <code>Offer</code> class
SWIFT_CLASS_NAMED("Offer")
@interface AEPOffer : NSObject
/// Unique Offer identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Offer revision detail at the time of the request
@property (nonatomic, readonly, copy) NSString * _Nonnull etag;
/// Offer schema string
@property (nonatomic, readonly, copy) NSString * _Nonnull schema;
/// Offer type as represented in enum <code>OfferType</code>
@property (nonatomic, readonly) enum AEPOfferType type;
/// Optional Offer language array
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable language;
/// Offer content string
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
/// Optional Offer characteristics dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable characteristics;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AEPOffer (SWIFT_EXTENSION(AEPMessaging))
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Interactions</code> field group from the given proposition option.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// If the proposition reference within the option is released and no longer valid, the method returns <code>nil</code>.
/// note:
/// The returned XDM data also contains the <code>eventType</code> for the Experience Event with value <code>decisioning.propositionDisplay</code>.
/// seealso:
/// <code>interactionXdm(for:)</code>
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon interactions.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)generateDisplayInteractionXdm SWIFT_WARN_UNUSED_RESULT;
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Interactions</code> field group from the given proposition option.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// If the proposition reference within the option is released and no longer valid, the method returns <code>nil</code>.
/// note:
/// The returned XDM data also contains the <code>eventType</code> for the Experience Event with value <code>decisioning.propositionInteract</code>.
/// seealso:
/// <code>interactionXdm(for:)</code>
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon interactions.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)generateTapInteractionXdm SWIFT_WARN_UNUSED_RESULT;
/// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for the given proposition item.
/// seealso:
/// <code>trackWithData(_:)</code>
- (void)displayed;
/// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the tap interaction data for the given proposition item.
/// seealso:
/// <code>trackWithData(_:)</code>
- (void)tapped;
@end

/// Enum representing the supported Offer Types.
typedef SWIFT_ENUM_NAMED(NSInteger, AEPOfferType, "OfferType", open) {
/// Unknown Offer type
  AEPOfferTypeUnknown = 0,
/// JSON Offer
  AEPOfferTypeJson = 1,
/// Plain text Offer
  AEPOfferTypeText = 2,
/// Html Offer
  AEPOfferTypeHtml = 3,
/// Image Offer
  AEPOfferTypeImage = 4,
};


SWIFT_CLASS_NAMED("Optimize")
@interface AEPMobileOptimize : NSObject <AEPExtension>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPProposition;

@interface AEPMobileOptimize (SWIFT_EXTENSION(AEPMessaging))
/// This API dispatches an Event for the Edge network extension to fetch decision propositions for the provided decision scopes from the decisioning Services enabled behind Experience Edge.
/// The returned decision propositions are cached in memory in the Optimize SDK extension and can be retrieved using <code>getPropositions(for:_:)</code> API.
/// \param decisionScopes An array of decision scopes.
///
/// \param xdm Additional XDM-formatted data to be sent in the personalization request.
///
/// \param data Additional free-form data to be sent in the personalization request.
///
+ (void)updatePropositions:(NSArray<AEPDecisionScope *> * _Nonnull)decisionScopes withXdm:(NSDictionary<NSString *, id> * _Nullable)xdm andData:(NSDictionary<NSString *, id> * _Nullable)data;
/// This API retrieves the previously fetched decisions for the provided decision scopes from the in-memory extension cache.
/// The completion handler will be invoked with the decision propositions corresponding to the given decision scopes. If a certain decision scope has not already been fetched prior to this API call, it will not be contained in the returned propositions.
/// \param decisionScopes An array of decision scopes.
///
/// \param completion The completion handler to be invoked when the decisions are retrieved from cache.
///
+ (void)getPropositions:(NSArray<AEPDecisionScope *> * _Nonnull)decisionScopes completion:(void (^ _Nonnull)(NSDictionary<AEPDecisionScope *, AEPProposition *> * _Nullable, NSError * _Nullable))completion;
/// This API registers a permanent callback which will be invoked whenever the Edge extension dispatches an Event handle,
/// upon a personalization decisions response from the Experience Edge Network.
/// The personalization query requests can be triggered by the <code>updatePropositions(for:withXdm:andData:)</code> API,
/// Edge extension <code>sendEvent(experienceEvent:_:)</code> API or launch rules consequence.
/// \param action The completion handler to be invoked with the decision propositions.
///
+ (void)onPropositionsUpdate:(void (^ _Nonnull)(NSDictionary<AEPDecisionScope *, AEPProposition *> * _Nonnull))action;
/// This API clears the in-memory propositions cache.
+ (void)clearCachedPropositions;
@end


/// <code>Proposition</code> class
SWIFT_CLASS_NAMED("Proposition")
@interface AEPProposition : NSObject
/// Unique proposition identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Array containing proposition decision options
@property (nonatomic, copy) NSArray<AEPOffer *> * _Nonnull offers;
/// Decision scope string
@property (nonatomic, readonly, copy) NSString * _Nonnull scope;
/// Scope details dictionary
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull scopeDetails;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AEPProposition (SWIFT_EXTENSION(AEPMessaging))
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Reference</code> field group from the given proposition.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// note:
/// The returned XDM data does not contain an <code>eventType</code> for the Experience Event.
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon reference.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nonnull)generateReferenceXdm SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPMESSAGING_SWIFT_H
#define AEPMESSAGING_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPCore;
@import AEPServices;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPMessaging",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// <code>DecisionScope</code> class is used to create decision scopes for personalization requests to Experience Edge Network.
SWIFT_CLASS_NAMED("DecisionScope")
@interface AEPDecisionScope : NSObject
/// Decision scope name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Creates a new decision scope using the given scope <code>name</code>.
/// \param name string representation for the decision scope.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Creates a new decision scope using the given <code>activityId</code>, <code>placementId</code> and <code>itemCount</code>.
/// This initializer creates a scope name by Base64 encoding the JSON string created using the provided data.
/// If <code>itemCount</code> == 1, JSON string is
/// \code
/// {"activityId":#activityId,"placementId":#placementId}
///
/// \endcodeotherwise,
/// \code
/// {"activityId":#activityId,"placementId":#placementId,"itemCount":#itemCount}
///
/// \endcode\param activityId unique activity identifier for the decisioning activity.
///
/// \param placementId unique placement identifier for the decisioning activity offer.
///
/// \param itemCount number of offers to be returned from the server.
///
- (nonnull instancetype)initWithActivityId:(NSString * _Nonnull)activityId placementId:(NSString * _Nonnull)placementId itemCount:(NSUInteger)itemCount;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class UIView;
enum AEPMessagingEdgeEventType : NSInteger;

/// Class that contains the definition of an in-app message and controls its tracking via Experience Edge events.
SWIFT_CLASS_NAMED("Message")
@interface AEPMessage : NSObject
/// ID of the <code>Message</code>.
@property (nonatomic, copy) NSString * _Nonnull id;
/// If set to <code>true</code> (default), Experience Edge events will automatically be generated when this <code>Message</code> is
/// triggered, displayed, and dismissed.
@property (nonatomic) BOOL autoTrack;
/// Points to the message’s <code>WKWebView</code> instance, if it exists.
@property (nonatomic, readonly, strong) UIView * _Nullable view;
/// Signals to the UIServices that the message should be shown.
/// If <code>autoTrack</code> is true, calling this method will result in an “inapp.display” Edge Event being dispatched.
- (void)show;
/// Signals to the UIServices that the message should be dismissed.
/// If <code>autoTrack</code> is true, calling this method will result in an “inapp.dismiss” Edge Event being dispatched.
/// \param suppressAutoTrack if set to <code>true</code>, the “inapp.dismiss” Edge Event will not be sent regardless
/// of the <code>autoTrack</code> setting.
///
- (void)dismissSuppressingAutoTrack:(BOOL)suppressAutoTrack;
/// Generates an Edge Event for the provided <code>interaction</code> and <code>eventType</code>.
/// \param interaction a custom <code>String</code> value to be recorded in the interaction
///
/// \param eventType the <code>MessagingEdgeEventType</code> to be used for the ensuing Edge Event
///
- (void)trackInteraction:(NSString * _Nullable)interaction withEdgeEventType:(enum AEPMessagingEdgeEventType)eventType;
/// Adds a handler for Javascript messages sent from the message’s webview.
/// The parameter passed to <code>handler</code> will contain the body of the message passed from the webview’s Javascript.
/// \param name the name of the message that should be handled by <code>handler</code>
///
/// \param handler the closure to be called with the body of the message passed by the Javascript message
///
- (void)handleJavascriptMessage:(NSString * _Nonnull)name withHandler:(void (^ _Nonnull)(id _Nullable))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPFullscreenMessage;

@interface AEPMessage (SWIFT_EXTENSION(AEPMessaging)) <AEPFullscreenMessageDelegate>
- (void)onShowFullscreenMessage:(AEPFullscreenMessage * _Nonnull)_;
- (void)onShowFailure;
/// Informs the parent of the calling <code>message</code> that it has been dismissed.
/// \param message the <code>FullscreenMessage</code> being dismissed
///
- (void)onDismissFullscreenMessage:(AEPFullscreenMessage * _Nonnull)message;
/// Handles URL loading for links triggered from within the webview of the message.
/// This method checks the <code>url</code> parameter to determine if it should be handled locally or by the webview in <code>message</code>.
/// If the <code>url</code> has a scheme of “adbinapp”, the URL will be handled locally for one or more purposes:
/// <ul>
///   <li>
///     If the <code>url</code> host equals “dismiss”, the webview will be removed from its superview.
///   </li>
///   <li>
///     If the <code>url</code> has a query parameter named “interaction”, an interact event will be sent to experience edge
///     using the value provided for the “interaction” parameter.
///   </li>
///   <li>
///     If the <code>url</code> has a query parameter named “link” and its value is a valid URL, the URL will be loaded in
///     by the operating system’s default web browser (mobile Safari by default).
///   </li>
/// </ul>
/// \param message the message attempting to load a URL
///
/// \param url the URL attempting to be loaded
///
///
/// returns:
/// false if the message’s webview will handle the loading of the URL
- (BOOL)overrideUrlLoadFullscreenMessage:(AEPFullscreenMessage * _Nonnull)fullscreenMessage url:(NSString * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AEPExtensionRuntime;
@class AEPEvent;

SWIFT_CLASS_NAMED("Messaging")
@interface AEPMobileMessaging : NSObject <AEPExtension>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setExtensionVersion:(NSString * _Nonnull)value;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull friendlyName;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationResponse;

@interface AEPMobileMessaging (SWIFT_EXTENSION(AEPMessaging))
/// Sends the push notification interactions as an experience event to Adobe Experience Edge.
/// \param response UNNotificationResponse object which contains the payload and xdm informations.
///
/// \param applicationOpened Boolean values denoting whether the application was opened when notification was clicked
///
/// \param customActionId String value of the custom action (e.g button id on the notification) which was clicked.
///
+ (void)handleNotificationResponse:(UNNotificationResponse * _Nonnull)response applicationOpened:(BOOL)applicationOpened withCustomActionId:(NSString * _Nullable)customActionId;
/// Initiates a network call to retrieve remote In-App Message definitions.
+ (void)refreshInAppMessages;
@end


/// Provides mapping to XDM EventType strings needed for Experience Event requests
typedef SWIFT_ENUM_NAMED(NSInteger, AEPMessagingEdgeEventType, "MessagingEdgeEventType", open) {
  AEPMessagingEdgeEventTypeInappDismiss = 0,
  AEPMessagingEdgeEventTypeInappInteract = 1,
  AEPMessagingEdgeEventTypeInappTrigger = 2,
  AEPMessagingEdgeEventTypeInappDisplay = 3,
  AEPMessagingEdgeEventTypePushApplicationOpened = 4,
  AEPMessagingEdgeEventTypePushCustomAction = 5,
};

enum AEPOfferType : NSInteger;

/// <code>Offer</code> class
SWIFT_CLASS_NAMED("Offer")
@interface AEPOffer : NSObject
/// Unique Offer identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Offer revision detail at the time of the request
@property (nonatomic, readonly, copy) NSString * _Nonnull etag;
/// Offer schema string
@property (nonatomic, readonly, copy) NSString * _Nonnull schema;
/// Offer type as represented in enum <code>OfferType</code>
@property (nonatomic, readonly) enum AEPOfferType type;
/// Optional Offer language array
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable language;
/// Offer content string
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
/// Optional Offer characteristics dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable characteristics;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AEPOffer (SWIFT_EXTENSION(AEPMessaging))
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Interactions</code> field group from the given proposition option.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// If the proposition reference within the option is released and no longer valid, the method returns <code>nil</code>.
/// note:
/// The returned XDM data also contains the <code>eventType</code> for the Experience Event with value <code>decisioning.propositionDisplay</code>.
/// seealso:
/// <code>interactionXdm(for:)</code>
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon interactions.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)generateDisplayInteractionXdm SWIFT_WARN_UNUSED_RESULT;
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Interactions</code> field group from the given proposition option.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// If the proposition reference within the option is released and no longer valid, the method returns <code>nil</code>.
/// note:
/// The returned XDM data also contains the <code>eventType</code> for the Experience Event with value <code>decisioning.propositionInteract</code>.
/// seealso:
/// <code>interactionXdm(for:)</code>
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon interactions.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)generateTapInteractionXdm SWIFT_WARN_UNUSED_RESULT;
/// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for the given proposition item.
/// seealso:
/// <code>trackWithData(_:)</code>
- (void)displayed;
/// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the tap interaction data for the given proposition item.
/// seealso:
/// <code>trackWithData(_:)</code>
- (void)tapped;
@end

/// Enum representing the supported Offer Types.
typedef SWIFT_ENUM_NAMED(NSInteger, AEPOfferType, "OfferType", open) {
/// Unknown Offer type
  AEPOfferTypeUnknown = 0,
/// JSON Offer
  AEPOfferTypeJson = 1,
/// Plain text Offer
  AEPOfferTypeText = 2,
/// Html Offer
  AEPOfferTypeHtml = 3,
/// Image Offer
  AEPOfferTypeImage = 4,
};


SWIFT_CLASS_NAMED("Optimize")
@interface AEPMobileOptimize : NSObject <AEPExtension>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPProposition;

@interface AEPMobileOptimize (SWIFT_EXTENSION(AEPMessaging))
/// This API dispatches an Event for the Edge network extension to fetch decision propositions for the provided decision scopes from the decisioning Services enabled behind Experience Edge.
/// The returned decision propositions are cached in memory in the Optimize SDK extension and can be retrieved using <code>getPropositions(for:_:)</code> API.
/// \param decisionScopes An array of decision scopes.
///
/// \param xdm Additional XDM-formatted data to be sent in the personalization request.
///
/// \param data Additional free-form data to be sent in the personalization request.
///
+ (void)updatePropositions:(NSArray<AEPDecisionScope *> * _Nonnull)decisionScopes withXdm:(NSDictionary<NSString *, id> * _Nullable)xdm andData:(NSDictionary<NSString *, id> * _Nullable)data;
/// This API retrieves the previously fetched decisions for the provided decision scopes from the in-memory extension cache.
/// The completion handler will be invoked with the decision propositions corresponding to the given decision scopes. If a certain decision scope has not already been fetched prior to this API call, it will not be contained in the returned propositions.
/// \param decisionScopes An array of decision scopes.
///
/// \param completion The completion handler to be invoked when the decisions are retrieved from cache.
///
+ (void)getPropositions:(NSArray<AEPDecisionScope *> * _Nonnull)decisionScopes completion:(void (^ _Nonnull)(NSDictionary<AEPDecisionScope *, AEPProposition *> * _Nullable, NSError * _Nullable))completion;
/// This API registers a permanent callback which will be invoked whenever the Edge extension dispatches an Event handle,
/// upon a personalization decisions response from the Experience Edge Network.
/// The personalization query requests can be triggered by the <code>updatePropositions(for:withXdm:andData:)</code> API,
/// Edge extension <code>sendEvent(experienceEvent:_:)</code> API or launch rules consequence.
/// \param action The completion handler to be invoked with the decision propositions.
///
+ (void)onPropositionsUpdate:(void (^ _Nonnull)(NSDictionary<AEPDecisionScope *, AEPProposition *> * _Nonnull))action;
/// This API clears the in-memory propositions cache.
+ (void)clearCachedPropositions;
@end


/// <code>Proposition</code> class
SWIFT_CLASS_NAMED("Proposition")
@interface AEPProposition : NSObject
/// Unique proposition identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Array containing proposition decision options
@property (nonatomic, copy) NSArray<AEPOffer *> * _Nonnull offers;
/// Decision scope string
@property (nonatomic, readonly, copy) NSString * _Nonnull scope;
/// Scope details dictionary
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull scopeDetails;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AEPProposition (SWIFT_EXTENSION(AEPMessaging))
/// Creates a dictionary containing XDM formatted data for <code>Experience Event - Proposition Reference</code> field group from the given proposition.
/// The Edge <code>sendEvent(experienceEvent:_:)</code> API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.
/// note:
/// The returned XDM data does not contain an <code>eventType</code> for the Experience Event.
/// <ul>
///   <li>
///     Returns A dictionary containing XDM data for the propositon reference.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nonnull)generateReferenceXdm SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
