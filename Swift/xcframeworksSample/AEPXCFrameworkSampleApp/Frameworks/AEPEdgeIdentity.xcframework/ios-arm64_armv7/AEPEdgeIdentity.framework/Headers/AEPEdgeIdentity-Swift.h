#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPEDGEIDENTITY_SWIFT_H
#define AEPEDGEIDENTITY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPCore;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPEdgeIdentity",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// The state this identity is authenticated.
/// <ul>
///   <li>
///     ambiguous - Ambiguous.
///   </li>
///   <li>
///     authenticated - User identified by a login or similar action that was valid at the time of the event observation.
///   </li>
///   <li>
///     loggedOut - User was identified by a login action at some point of time previously, but is not currently logged in.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, AEPAuthenticatedState, "AuthenticatedState", open) {
  AEPAuthenticatedStateAmbiguous = 0,
  AEPAuthenticatedStateAuthenticated = 1,
  AEPAuthenticatedStateLoggedOut = 2,
};

@class NSString;
@protocol AEPExtensionRuntime;
@class AEPEvent;
@class NSNumber;

SWIFT_CLASS_NAMED("Identity")
@interface AEPMobileEdgeIdentity : NSObject <AEPExtension>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPIdentityMap;
@class AEPIdentityItem;

@interface AEPMobileEdgeIdentity (SWIFT_EXTENSION(AEPEdgeIdentity))
/// Returns the Experience Cloud ID, or an <code>AEPError</code> if any occurred. An empty string is returned if the Experience Cloud ID was previously cleared.
/// \param completion invoked once the Experience Cloud ID is available, or
/// an <code>AEPError</code> if an unexpected error occurs or the request timed out.
///
+ (void)getExperienceCloudId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Returns all  identifiers, including customer identifiers which were previously added, or an <code>AEPError</code> if an unexpected error occurs or the request timed out.
/// If there are no identifiers stored in the <code>Identity</code> extension, then an empty <code>IdentityMap</code> is returned.
/// \param completion invoked once the identifiers are available, or
/// an <code>AEPError</code> if an unexpected error occurs or the request timed out.
///
+ (void)getIdentities:(void (^ _Nonnull)(AEPIdentityMap * _Nullable, NSError * _Nullable))completion;
/// Updates the currently known <code>IdentityMap</code> within the SDK. The Identity extension will merge the received identifiers
/// with the previously saved one in an additive manner, no identifiers will be removed using this API.
/// Identifiers which have an empty  <code>id</code> or empty <code>namespace</code> are not allowed and are ignored.
/// \param map The identifiers to add or update
///
+ (void)updateIdentities:(AEPIdentityMap * _Nonnull)map;
/// Removes the identity from the stored client-side <code>IdentityMap</code>. The Identity extension will stop sending this identifier.
/// This does not clear the identifier from the User Profile Graph.
/// \param item The identity to remove.
///
/// \param withNamespace The namespace of the identity to remove.
///
+ (void)removeIdentityItem:(AEPIdentityItem * _Nonnull)item withNamespace:(NSString * _Nonnull)withNamespace;
@end


/// Identity is used to clearly distinguish people that are interacting with digital experiences.
SWIFT_CLASS_NAMED("IdentityItem")
@interface AEPIdentityItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum AEPAuthenticatedState authenticatedState;
@property (nonatomic, readonly) BOOL primary;
/// Creates a new <code>IdentityItem</code>.
/// \param id Identity of the consumer in the related namespace.
///
/// \param authenticatedState The state this identity is authenticated as. Default is ‘ambiguous’.
///
/// \param primary Indicates this identity is the preferred identity. Is used as a hint to help systems better organize how identities are queried. Default is false.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id authenticatedState:(enum AEPAuthenticatedState)authenticatedState primary:(BOOL)primary OBJC_DESIGNATED_INITIALIZER;
/// Defines two <code>IdentityItem</code> objects are equal if they have the same <code>id</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines a map containing a set of end user identities, keyed on either namespace integration code or the namespace ID of the identity.
/// Within each namespace, the identity is unique. The values of the map are an array, meaning that more than one identity of each namespace may be carried.
SWIFT_CLASS_NAMED("IdentityMap")
@interface AEPIdentityMap : NSObject
/// Determines if this <code>IdentityMap</code> has no identities.
@property (nonatomic, readonly) BOOL isEmpty;
/// A list of all namespaces used in this <code>IdentityMap</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull namespaces;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Adds an <code>IdentityItem</code> to this map. If an item is added which shares the same <code>withNamespace</code> and <code>item.id</code> as an item
/// already in the map, then the new item replaces the existing item. Empty <code>withNamespace</code> or items with an empty <code>item.id</code> are not allowed and are ignored.
/// \param item The identity as an <code>IdentityItem</code> object
///
/// \param namespace The namespace for this identity
///
- (void)addItem:(AEPIdentityItem * _Nonnull)item withNamespace:(NSString * _Nonnull)withNamespace;
/// Remove a single <code>IdentityItem</code> from this map.
/// \param item The identity to remove from the given <code>withNamespace</code>
///
/// \param withNamespace The namespace for the identity to remove
///
- (void)removeItem:(AEPIdentityItem * _Nonnull)item withNamespace:(NSString * _Nonnull)withNamespace;
/// Get the array of <code>IdentityItem</code>(s) for the given namespace.
/// \param withNamespace the namespace of items to retrieve
///
///
/// returns:
/// An array of <code>IdentityItem</code>s for the given <code>withNamespace</code> or nil if this <code>IdentityMap</code> does not contain the <code>withNamespace</code>.
- (NSArray<AEPIdentityItem *> * _Nullable)getItemsWithNamespace:(NSString * _Nonnull)withNamespace SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPEDGEIDENTITY_SWIFT_H
#define AEPEDGEIDENTITY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPCore;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPEdgeIdentity",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// The state this identity is authenticated.
/// <ul>
///   <li>
///     ambiguous - Ambiguous.
///   </li>
///   <li>
///     authenticated - User identified by a login or similar action that was valid at the time of the event observation.
///   </li>
///   <li>
///     loggedOut - User was identified by a login action at some point of time previously, but is not currently logged in.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, AEPAuthenticatedState, "AuthenticatedState", open) {
  AEPAuthenticatedStateAmbiguous = 0,
  AEPAuthenticatedStateAuthenticated = 1,
  AEPAuthenticatedStateLoggedOut = 2,
};

@class NSString;
@protocol AEPExtensionRuntime;
@class AEPEvent;
@class NSNumber;

SWIFT_CLASS_NAMED("Identity")
@interface AEPMobileEdgeIdentity : NSObject <AEPExtension>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPIdentityMap;
@class AEPIdentityItem;

@interface AEPMobileEdgeIdentity (SWIFT_EXTENSION(AEPEdgeIdentity))
/// Returns the Experience Cloud ID, or an <code>AEPError</code> if any occurred. An empty string is returned if the Experience Cloud ID was previously cleared.
/// \param completion invoked once the Experience Cloud ID is available, or
/// an <code>AEPError</code> if an unexpected error occurs or the request timed out.
///
+ (void)getExperienceCloudId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Returns all  identifiers, including customer identifiers which were previously added, or an <code>AEPError</code> if an unexpected error occurs or the request timed out.
/// If there are no identifiers stored in the <code>Identity</code> extension, then an empty <code>IdentityMap</code> is returned.
/// \param completion invoked once the identifiers are available, or
/// an <code>AEPError</code> if an unexpected error occurs or the request timed out.
///
+ (void)getIdentities:(void (^ _Nonnull)(AEPIdentityMap * _Nullable, NSError * _Nullable))completion;
/// Updates the currently known <code>IdentityMap</code> within the SDK. The Identity extension will merge the received identifiers
/// with the previously saved one in an additive manner, no identifiers will be removed using this API.
/// Identifiers which have an empty  <code>id</code> or empty <code>namespace</code> are not allowed and are ignored.
/// \param map The identifiers to add or update
///
+ (void)updateIdentities:(AEPIdentityMap * _Nonnull)map;
/// Removes the identity from the stored client-side <code>IdentityMap</code>. The Identity extension will stop sending this identifier.
/// This does not clear the identifier from the User Profile Graph.
/// \param item The identity to remove.
///
/// \param withNamespace The namespace of the identity to remove.
///
+ (void)removeIdentityItem:(AEPIdentityItem * _Nonnull)item withNamespace:(NSString * _Nonnull)withNamespace;
@end


/// Identity is used to clearly distinguish people that are interacting with digital experiences.
SWIFT_CLASS_NAMED("IdentityItem")
@interface AEPIdentityItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum AEPAuthenticatedState authenticatedState;
@property (nonatomic, readonly) BOOL primary;
/// Creates a new <code>IdentityItem</code>.
/// \param id Identity of the consumer in the related namespace.
///
/// \param authenticatedState The state this identity is authenticated as. Default is ‘ambiguous’.
///
/// \param primary Indicates this identity is the preferred identity. Is used as a hint to help systems better organize how identities are queried. Default is false.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id authenticatedState:(enum AEPAuthenticatedState)authenticatedState primary:(BOOL)primary OBJC_DESIGNATED_INITIALIZER;
/// Defines two <code>IdentityItem</code> objects are equal if they have the same <code>id</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines a map containing a set of end user identities, keyed on either namespace integration code or the namespace ID of the identity.
/// Within each namespace, the identity is unique. The values of the map are an array, meaning that more than one identity of each namespace may be carried.
SWIFT_CLASS_NAMED("IdentityMap")
@interface AEPIdentityMap : NSObject
/// Determines if this <code>IdentityMap</code> has no identities.
@property (nonatomic, readonly) BOOL isEmpty;
/// A list of all namespaces used in this <code>IdentityMap</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull namespaces;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Adds an <code>IdentityItem</code> to this map. If an item is added which shares the same <code>withNamespace</code> and <code>item.id</code> as an item
/// already in the map, then the new item replaces the existing item. Empty <code>withNamespace</code> or items with an empty <code>item.id</code> are not allowed and are ignored.
/// \param item The identity as an <code>IdentityItem</code> object
///
/// \param namespace The namespace for this identity
///
- (void)addItem:(AEPIdentityItem * _Nonnull)item withNamespace:(NSString * _Nonnull)withNamespace;
/// Remove a single <code>IdentityItem</code> from this map.
/// \param item The identity to remove from the given <code>withNamespace</code>
///
/// \param withNamespace The namespace for the identity to remove
///
- (void)removeItem:(AEPIdentityItem * _Nonnull)item withNamespace:(NSString * _Nonnull)withNamespace;
/// Get the array of <code>IdentityItem</code>(s) for the given namespace.
/// \param withNamespace the namespace of items to retrieve
///
///
/// returns:
/// An array of <code>IdentityItem</code>s for the given <code>withNamespace</code> or nil if this <code>IdentityMap</code> does not contain the <code>withNamespace</code>.
- (NSArray<AEPIdentityItem *> * _Nullable)getItemsWithNamespace:(NSString * _Nonnull)withNamespace SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
