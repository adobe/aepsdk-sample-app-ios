#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPCORE_SWIFT_H
#define AEPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPServices;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// An enum which describes different errors from the AEP SDK can return
typedef SWIFT_ENUM(NSInteger, AEPError, open) {
  AEPErrorUnexpected = 0,
  AEPErrorCallbackTimeout = 1,
  AEPErrorCallbackNil = 2,
  AEPErrorNone = 3,
  AEPErrorServerError = 4,
  AEPErrorNetworkError = 5,
  AEPErrorInvalidRequest = 6,
  AEPErrorInvalidResponse = 7,
  AEPErrorErrorExtensionNotInitialized = 11,
};
static NSString * _Nonnull const AEPErrorDomain = @"AEPCore.AEPError";

@class NSString;
@class NSUUID;
@class NSDate;
@class NSNumber;

/// An Event to be dispatched by the Event Hub
SWIFT_CLASS_NAMED("Event")
@interface AEPEvent : NSObject
/// Name of the event
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// unique identifier for the event
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
/// The <code>EventType</code> for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The <code>EventSource</code> for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull source;
/// Optional data associated with this event
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
/// Date this event was created
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// If <code>responseID</code> is not nil, then this event is a response event and <code>responseID</code> is the <code>event.id</code> of the <code>triggerEvent</code>
@property (nonatomic, readonly, copy) NSUUID * _Nullable responseID;
/// Event description used for logging
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Specifies the properties in the Event and its <code>data</code> that should be used in the hash for <code>EventHistory</code> storage.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable mask;
/// A calculated hash that represents this Event as defined by its properties and the provided <code>mask</code>
@property (nonatomic) uint32_t eventHash;
/// Creates a new <code>Event</code> with the given parameters
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Creates a new <code>Event</code> with the given parameters
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
/// \param mask Defines which properties should be used in creation of the Event’s hash
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data mask:(NSArray<NSString *> * _Nullable)mask;
/// Creates a new <code>Event</code> where the <code>responseID</code> is equal to the <code>id</code> of this <code>Event</code>
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
- (AEPEvent * _Nonnull)responseEventWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Used for selecting or deleting Events from Event History.
SWIFT_CLASS_NAMED("EventHistoryRequest")
@interface AEPEventHistoryRequest : NSObject
/// Key-value pairs that will be used to generate the hash when looking up an Event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull mask;
/// Date that represents the lower bounds of the date range used when looking up an Event.
/// If not provided, the lookup will use the beginning of Event History as the lower bounds.
@property (nonatomic, readonly, copy) NSDate * _Nullable fromDate;
/// Date that represents the upper bounds of the date range used when looking up an Event.
/// If not provided, there will be no upper bound on the date range.
@property (nonatomic, readonly, copy) NSDate * _Nullable toDate;
/// Initialize an <code>EventHistoryRequest</code> object.
/// \param mask Key-value pairs that will be used to generate the hash when looking up an Event
///
/// \param from Date that represents the lower bounds of the date range used when looking up an Event
///
/// \param to Date that represents the upper bounds of the date range used when looking up an Event
///
- (nonnull instancetype)initWithMask:(NSDictionary<NSString *, id> * _Nonnull)mask from:(NSDate * _Nullable)from to:(NSDate * _Nullable)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Passed to handlers by <code>EventHistory</code> when Events are requested via <code>getEvents</code> API.
SWIFT_CLASS_NAMED("EventHistoryResult")
@interface AEPEventHistoryResult : NSObject
/// The number of occurrences in <code>EventHistory</code> of the <code>EventHistoryRequest</code> specified.
@property (nonatomic, readonly) NSInteger count;
/// A date representing the oldest occurrence of the event found in <code>EventHistory</code>.
/// If <code>count</code> == 0, this value will be nil.
@property (nonatomic, readonly, copy) NSDate * _Nullable oldestOccurrence;
/// A date representing the most recent occurrence of the event found in <code>EventHistory</code>.
/// If <code>count</code> == 0, this value will be nil.
@property (nonatomic, readonly, copy) NSDate * _Nullable newestOccurrence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the source from which an event originates
SWIFT_CLASS_NAMED("EventSource")
@interface AEPEventSource : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull none;)
+ (NSString * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull os;)
+ (NSString * _Nonnull)os SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestContent;)
+ (NSString * _Nonnull)requestContent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestIdentity;)
+ (NSString * _Nonnull)requestIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestProfile;)
+ (NSString * _Nonnull)requestProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestReset;)
+ (NSString * _Nonnull)requestReset SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseContent;)
+ (NSString * _Nonnull)responseContent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseIdentity;)
+ (NSString * _Nonnull)responseIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseProfile;)
+ (NSString * _Nonnull)responseProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sharedState;)
+ (NSString * _Nonnull)sharedState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notification;)
+ (NSString * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateConsent;)
+ (NSString * _Nonnull)updateConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateIdentity;)
+ (NSString * _Nonnull)updateIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeIdentity;)
+ (NSString * _Nonnull)removeIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wildcard;)
+ (NSString * _Nonnull)wildcard SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resetComplete;)
+ (NSString * _Nonnull)resetComplete SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applicationLaunch;)
+ (NSString * _Nonnull)applicationLaunch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applicationClose;)
+ (NSString * _Nonnull)applicationClose SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull personalizationDecisions;)
+ (NSString * _Nonnull)personalizationDecisions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents the type of an event
SWIFT_CLASS_NAMED("EventType")
@interface AEPEventType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull acquisition;)
+ (NSString * _Nonnull)acquisition SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull analytics;)
+ (NSString * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull audienceManager;)
+ (NSString * _Nonnull)audienceManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull campaign;)
+ (NSString * _Nonnull)campaign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull configuration;)
+ (NSString * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull custom;)
+ (NSString * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edge;)
+ (NSString * _Nonnull)edge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edgeConsent;)
+ (NSString * _Nonnull)edgeConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edgeIdentity;)
+ (NSString * _Nonnull)edgeIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericData;)
+ (NSString * _Nonnull)genericData SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericIdentity;)
+ (NSString * _Nonnull)genericIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericLifecycle;)
+ (NSString * _Nonnull)genericLifecycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericPii;)
+ (NSString * _Nonnull)genericPii SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericTrack;)
+ (NSString * _Nonnull)genericTrack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hub;)
+ (NSString * _Nonnull)hub SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identity;)
+ (NSString * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lifecycle;)
+ (NSString * _Nonnull)lifecycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull location;)
+ (NSString * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messaging;)
+ (NSString * _Nonnull)messaging SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offerDecisioning;)
+ (NSString * _Nonnull)offerDecisioning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull optimize;)
+ (NSString * _Nonnull)optimize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pii;)
+ (NSString * _Nonnull)pii SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull places;)
+ (NSString * _Nonnull)places SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rulesEngine;)
+ (NSString * _Nonnull)rulesEngine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull signal;)
+ (NSString * _Nonnull)signal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull system;)
+ (NSString * _Nonnull)system SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull target;)
+ (NSString * _Nonnull)target SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userProfile;)
+ (NSString * _Nonnull)userProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wildcard;)
+ (NSString * _Nonnull)wildcard SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AEPExtensionRuntime;

/// An object which can be registered with the <code>EventHub</code>
SWIFT_PROTOCOL_NAMED("Extension")
@protocol AEPExtension
/// Name of the extension
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// A friendly, human-readable name of the extension
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
/// Version of the extension
/// This variable is <code>static</code> so that it may be accessed from a <code>static</code> public API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
/// Optional metadata to be provided to the <code>EventHub</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Provides access to <code>ExtensionRuntime</code> methods that can be used by extension
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
/// Invoked when the extension has been registered by the <code>EventHub</code>
- (void)onRegistered;
/// Invoked when the extension has been unregistered by the <code>EventHub</code>
- (void)onUnregistered;
/// Called before each <code>Event</code> is processed by any <code>ExtensionListener</code> owned by this <code>Extension</code>
/// Should be overridden by any extension that wants to control its own <code>Event</code> flow on a per <code>Event</code> basis.
/// \param event event that will be processed next
///
///
/// returns:
/// <em>true</em> if event processing should continue for this <code>Extension</code>
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// An <code>Extension</code> must support parameterless initialization
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime;
@end

@class AEPSharedStateResult;

/// provides all the methods needed by an <code>Extension</code>
SWIFT_PROTOCOL_NAMED("ExtensionRuntime")
@protocol AEPExtensionRuntime
/// Unregisters this extension from the <code>EventHub</code>
- (void)unregisterExtension;
/// Registers an <code>EventListener</code> for the specified <code>EventType</code> and <code>EventSource</code>
/// \param type <code>EventType</code> to listen for
///
/// \param source <code>EventSource</code> to listen for
///
/// \param listener Function or closure which will be invoked whenever the <code>EventHub</code> receives an <code>Event</code> matching <code>type</code> and <code>source</code>
///
- (void)registerListenerWithType:(NSString * _Nonnull)type source:(NSString * _Nonnull)source listener:(void (^ _Nonnull)(AEPEvent * _Nonnull))listener;
/// Starts the <code>Event</code> queue for this extension
- (void)startEvents;
/// Stops the <code>Event</code> queue for this extension
- (void)stopEvents;
/// Dispatches an <code>Event</code> to the <code>EventHub</code>
/// \param event An <code>Event</code> to be dispatched to the <code>EventHub</code>
///
- (void)dispatchWithEvent:(AEPEvent * _Nonnull)event;
/// Creates a new <code>SharedState</code> for this extension
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param data Data for the <code>SharedState</code>
///
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
- (void)createSharedStateWithData:(NSDictionary<NSString *, id> * _Nonnull)data event:(AEPEvent * _Nullable)event;
/// Creates a pending <code>SharedState</code> versioned at <code>event</code>
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
///
/// returns:
/// a <code>SharedStateResolver</code> that should be called with the <code>SharedState</code> data when it is ready
- (void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))createPendingSharedStateWithEvent:(AEPEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Gets the <code>SharedState</code> data for a specified extension
/// \param extensionName An extension name whose <code>SharedState</code> will be returned
///
/// \param event If not nil, will retrieve the <code>SharedState</code> that corresponds with this event’s version or latest if not yet versioned. If event is nil will return the latest <code>SharedState</code>
///
/// \param barrier If true, the <code>EventHub</code> will only return <code>.set</code> if <code>extensionName</code> has moved past <code>event</code>
///
///
/// returns:
/// A <code>SharedStateResult?</code> for the requested <code>extensionName</code> and <code>event</code>
- (AEPSharedStateResult * _Nullable)getSharedStateWithExtensionName:(NSString * _Nonnull)extensionName event:(AEPEvent * _Nullable)event barrier:(BOOL)barrier SWIFT_WARN_UNUSED_RESULT;
/// Creates a new XDM SharedState for this extension.
/// The data passed to this API needs to be mapped to known XDM mixins; if an extension uses multiple mixins, the current data for all of them should be provided when the XDM shared state is set.
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param data Data for the <code>SharedState</code>
///
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
- (void)createXDMSharedStateWithData:(NSDictionary<NSString *, id> * _Nonnull)data event:(AEPEvent * _Nullable)event;
/// Creates a pending XDM <code>SharedState</code> versioned at <code>event</code>
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
///
/// returns:
/// a <code>SharedStateResolver</code> that should be called with the <code>SharedState</code> data when it is ready
- (void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))createPendingXDMSharedStateWithEvent:(AEPEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Gets the XDM SharedState data for a specified extension. If this extension populates multiple mixins in their shared state, all the data will be returned at once and it can be accessed using path discovery.
/// \param extensionName An extension name whose <code>SharedState</code> will be returned
///
/// \param event If not nil, will retrieve the <code>SharedState</code> that corresponds with the event’s version, if nil will return the latest <code>SharedState</code>
///
/// \param barrier If true, the <code>EventHub</code> will only return <code>.set</code> if <code>extensionName</code> has moved past <code>event</code>
///
///
/// returns:
/// A <code>SharedStateResult?</code> for the requested <code>extensionName</code> and <code>event</code>
- (AEPSharedStateResult * _Nullable)getXDMSharedStateWithExtensionName:(NSString * _Nonnull)extensionName event:(AEPEvent * _Nullable)event barrier:(BOOL)barrier SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a count of historical events matching the provided requests.
/// \param requests an array of <code>EventHistoryRequest</code>s used to generate the hash and timeframe for the event lookup
///
/// \param enforceOrder if <code>true</code>, consecutive lookups will use the oldest timestamp from the previous event as their
/// from date
///
/// \param handler contains an <code>EventHistoryResult</code> for each provided request
///
- (void)getHistoricalEvents:(NSArray<AEPEventHistoryRequest *> * _Nonnull)requests enforceOrder:(BOOL)enforceOrder handler:(void (^ _Nonnull)(NSArray<AEPEventHistoryResult *> * _Nonnull))handler;
@end

@protocol AEPMessagingDelegate;
@class NSData;
enum AEPWrapperType : NSInteger;

/// Core extension for the Adobe Experience Platform SDK
SWIFT_CLASS_NAMED("MobileCore")
@interface AEPMobileCore : NSObject
/// Current version of the Core extension
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <AEPMessagingDelegate> _Nullable messagingDelegate;)
+ (id <AEPMessagingDelegate> _Nullable)messagingDelegate SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE;
+ (void)setMessagingDelegate:(id <AEPMessagingDelegate> _Nullable)newValue;
/// Registers the extensions with Core and begins event processing
/// \param extensions The extensions to be registered
///
/// \param completion Closure to run when extensions have been registered
///
+ (void)registerExtensions:(NSArray<SWIFT_METATYPE(NSObject)> * _Nonnull)extensions completion:(void (^ _Nullable)(void))completion;
/// Registers the extension from MobileCore
/// \param exten The extension to be registered
///
+ (void)registerExtension:(Class <AEPExtension> _Nonnull)exten completion:(void (^ _Nullable)(void))completion;
/// Unregisters the extension from MobileCore
/// \param exten The extension to be unregistered
///
+ (void)unregisterExtension:(Class <AEPExtension> _Nonnull)exten completion:(void (^ _Nullable)(void))completion;
/// Fetches a list of registered extensions along with their respective versions
///
/// returns:
/// list of registered extensions along with their respective versions
+ (NSString * _Nonnull)getRegisteredExtensions SWIFT_WARN_UNUSED_RESULT;
/// Dispatches an <code>Event</code> through the <code>EventHub</code>
/// \param event The <code>Event</code> to be dispatched
///
+ (void)dispatch:(AEPEvent * _Nonnull)event;
/// Dispatches an <code>Event</code> through the <code>EventHub</code> and invokes a closure with the response <code>Event</code>.
/// \param event The trigger <code>Event</code> to be dispatched through the <code>EventHub</code>
///
/// \param timeout A timeout in seconds, if the response listener is not invoked within the timeout, then the <code>EventHub</code> invokes the response listener with a nil <code>Event</code>
///
/// \param responseCallback Callback to be invoked with <code>event</code>’s response <code>Event</code>
///
+ (void)dispatch:(AEPEvent * _Nonnull)event timeout:(NSTimeInterval)timeout responseCallback:(void (^ _Nonnull)(AEPEvent * _Nullable))responseCallback;
/// Registers an <code>EventListener</code> to perform on the global system queue (Qos = .default) which will be invoked whenever an event with matched type and source is dispatched.
/// \param type A <code>String</code> indicating the event type the current listener is listening for
///
/// \param source A <code>String</code> indicating the event source the current listener is listening for
///
/// \param listener An <code>EventResponseListener</code> which will be invoked whenever the <code>EventHub</code> receives an event with matched type and source.
///
+ (void)registerEventListenerWithType:(NSString * _Nonnull)type source:(NSString * _Nonnull)source listener:(void (^ _Nonnull)(AEPEvent * _Nonnull))listener;
/// Submits a generic event containing the provided IDFA with event type <code>generic.identity</code>.
/// \param identifier the advertising identifier string.
///
+ (void)setAdvertisingIdentifier:(NSString * _Nullable)identifier;
/// Submits a generic event containing the provided push token with event type <code>generic.identity</code>.
/// \param deviceToken the device token for push notifications
///
+ (void)setPushIdentifier:(NSData * _Nullable)deviceToken;
/// Sets the wrapper type for the SDK. Only applicable when being used in a cross platform environment such as React Native
/// \param type the <code>WrapperType</code> corresponding to the current platform
///
+ (void)setWrapperType:(enum AEPWrapperType)type;
/// Sets the logging level for the SDK
/// \param level The desired log level
///
+ (void)setLogLevel:(enum AEPLogLevel)level;
/// Sets the app group used to sharing user defaults and files among containing app and extension apps.
/// This must be called in AppDidFinishLaunching and before any other interactions with the Adobe Mobile library have happened.
/// \param group the app group name
///
+ (void)setAppGroup:(NSString * _Nullable)group;
/// For scenarios where the app is launched as a result of notification tap
/// \param messageInfo Dictionary of data relevant to the expected use case
///
+ (void)collectMessageInfo:(NSDictionary<NSString *, id> * _Nonnull)messageInfo;
/// For scenarios where the app is launched as a result of push message or deep link click-throughs
/// \param userInfo Dictionary of data relevant to the expected use case
///
+ (void)collectLaunchInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo;
/// Submits a generic PII collection request event with type <code>generic.pii</code>.
/// \param data a dictionary containing PII data
///
+ (void)collectPii:(NSDictionary<NSString *, id> * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Start a new lifecycle session or resume a previously paused lifecycle session. If a previously paused
/// session timed out, then a new session is created. If a current session is running, then calling this
/// method does nothing.
/// \param additionalContextData Optional additional context for this session.
///
+ (void)lifecycleStart:(NSDictionary<NSString *, id> * _Nullable)additionalContextData;
/// Pauses the current lifecycle session. Calling pause on an already paused session updates the paused timestamp,
/// having the effect of resetting the session timeout timer. If no lifecycle session is running,
/// then calling this method does nothing.
+ (void)lifecyclePause;
@end


@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Generates and dispatches a track action <code>Event</code>
/// \param action <code>String</code> representing the name of the action to be tracked
///
/// \param data Dictionary of data to attach to the dispatched <code>Event</code>
///
+ (void)trackAction:(NSString * _Nullable)action data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Generates and dispatches a track state <code>Event</code>
/// \param state <code>String</code> representing the name of the state to be tracked
///
/// \param data Dictionary of data to attach to the dispatched <code>Event</code>
///
+ (void)trackState:(NSString * _Nullable)state data:(NSDictionary<NSString *, id> * _Nullable)data;
@end

enum AEPPrivacyStatus : NSInteger;

@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Configure the SDK by downloading the remote configuration file hosted on Adobe servers
/// specified by the given application ID. The configuration file is cached once downloaded
/// and used in subsequent calls to this API. If the remote file is updated after the first
/// download, the updated file is downloaded and replaces the cached file.
/// \param appId A unique identifier assigned to the app instance by Adobe Launch
///
+ (void)configureWithAppId:(NSString * _Nonnull)appId;
/// Configure the SDK by reading a local file containing the JSON configuration. On application relaunch,
/// the configuration from the file at <code>filePath</code> is not preserved and this method must be called again if desired.
/// \param filePath Absolute path to a local configuration file.
///
+ (void)configureWithFilePath:(NSString * _Nonnull)filePath;
/// Update the current SDK configuration with specific key/value pairs. Keys not found in the current
/// configuration are added. Configuration updates are preserved and applied over existing or new
/// configuration even across application restarts.
/// Using <code>nil</code> values is allowed and effectively removes the configuration parameter from the current configuration.
/// \param configDict configuration key/value pairs to be updated or added.
///
+ (void)updateConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configDict;
/// Clears the changes made by <code>updateConfigurationWith(configDict:)</code> and <code>setPrivacyStatus(_:)</code> to the initial configuration
/// provided by either <code>configureWith(appId:)</code> or <code>configureWith(filePath:)</code>
+ (void)clearUpdatedConfiguration;
/// Sets the <code>PrivacyStatus</code> for this SDK. The set privacy status is preserved and applied over any new
/// configuration changes from calls to configureWithAppId or configureWithFileInPath,
/// even across application restarts.
/// \param status <code>PrivacyStatus</code> to be set for the SDK
///
+ (void)setPrivacyStatus:(enum AEPPrivacyStatus)status;
/// Gets the currently configured <code>PrivacyStatus</code> and returns it via <code>completion</code>
/// \param completion Invoked with the current <code>PrivacyStatus</code>
///
+ (void)getPrivacyStatus:(void (^ _Nonnull)(enum AEPPrivacyStatus))completion;
/// Get a JSON string containing all of the user’s identities known by the SDK  and calls a handler upon completion.
/// \param completion a closure that is invoked with a <code>String?</code> containing the SDK identities in JSON format and an <code>AEPError</code> if the request failed
///
+ (void)getSdkIdentities:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Clears all identifiers from Edge extensions and generates a new Experience Cloud ID (ECID).
+ (void)resetIdentities;
@end

/// An enum type representing the possible opt-out and privacy settings.
typedef SWIFT_ENUM_NAMED(NSInteger, AEPPrivacyStatus, "PrivacyStatus", open) {
  AEPPrivacyStatusOptedIn = 0,
  AEPPrivacyStatusOptedOut = 1,
  AEPPrivacyStatusUnknown = 2,
};

enum AEPSharedStateStatus : NSInteger;

/// Contains the status and value for a given shared state
SWIFT_CLASS_NAMED("SharedStateResult")
@interface AEPSharedStateResult : NSObject
@property (nonatomic, readonly) enum AEPSharedStateStatus status;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Type representing the state of an extension’s <code>SharedState</code>
typedef SWIFT_ENUM_NAMED(NSInteger, AEPSharedStateStatus, "SharedStateStatus", open) {
  AEPSharedStateStatusSet = 0,
  AEPSharedStateStatusPending = 1,
  AEPSharedStateStatusNone = 2,
};

/// An enum type representing the possible wrapper types
typedef SWIFT_ENUM_NAMED(NSInteger, AEPWrapperType, "WrapperType", open) {
  AEPWrapperTypeNone = 0,
  AEPWrapperTypeReactNative = 1,
  AEPWrapperTypeFlutter = 2,
  AEPWrapperTypeCordova = 3,
  AEPWrapperTypeUnity = 4,
  AEPWrapperTypeXamarin = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPCORE_SWIFT_H
#define AEPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPServices;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// An enum which describes different errors from the AEP SDK can return
typedef SWIFT_ENUM(NSInteger, AEPError, open) {
  AEPErrorUnexpected = 0,
  AEPErrorCallbackTimeout = 1,
  AEPErrorCallbackNil = 2,
  AEPErrorNone = 3,
  AEPErrorServerError = 4,
  AEPErrorNetworkError = 5,
  AEPErrorInvalidRequest = 6,
  AEPErrorInvalidResponse = 7,
  AEPErrorErrorExtensionNotInitialized = 11,
};
static NSString * _Nonnull const AEPErrorDomain = @"AEPCore.AEPError";

@class NSString;
@class NSUUID;
@class NSDate;
@class NSNumber;

/// An Event to be dispatched by the Event Hub
SWIFT_CLASS_NAMED("Event")
@interface AEPEvent : NSObject
/// Name of the event
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// unique identifier for the event
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
/// The <code>EventType</code> for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The <code>EventSource</code> for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull source;
/// Optional data associated with this event
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
/// Date this event was created
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// If <code>responseID</code> is not nil, then this event is a response event and <code>responseID</code> is the <code>event.id</code> of the <code>triggerEvent</code>
@property (nonatomic, readonly, copy) NSUUID * _Nullable responseID;
/// Event description used for logging
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Specifies the properties in the Event and its <code>data</code> that should be used in the hash for <code>EventHistory</code> storage.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable mask;
/// A calculated hash that represents this Event as defined by its properties and the provided <code>mask</code>
@property (nonatomic) uint32_t eventHash;
/// Creates a new <code>Event</code> with the given parameters
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Creates a new <code>Event</code> with the given parameters
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
/// \param mask Defines which properties should be used in creation of the Event’s hash
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data mask:(NSArray<NSString *> * _Nullable)mask;
/// Creates a new <code>Event</code> where the <code>responseID</code> is equal to the <code>id</code> of this <code>Event</code>
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
- (AEPEvent * _Nonnull)responseEventWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Used for selecting or deleting Events from Event History.
SWIFT_CLASS_NAMED("EventHistoryRequest")
@interface AEPEventHistoryRequest : NSObject
/// Key-value pairs that will be used to generate the hash when looking up an Event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull mask;
/// Date that represents the lower bounds of the date range used when looking up an Event.
/// If not provided, the lookup will use the beginning of Event History as the lower bounds.
@property (nonatomic, readonly, copy) NSDate * _Nullable fromDate;
/// Date that represents the upper bounds of the date range used when looking up an Event.
/// If not provided, there will be no upper bound on the date range.
@property (nonatomic, readonly, copy) NSDate * _Nullable toDate;
/// Initialize an <code>EventHistoryRequest</code> object.
/// \param mask Key-value pairs that will be used to generate the hash when looking up an Event
///
/// \param from Date that represents the lower bounds of the date range used when looking up an Event
///
/// \param to Date that represents the upper bounds of the date range used when looking up an Event
///
- (nonnull instancetype)initWithMask:(NSDictionary<NSString *, id> * _Nonnull)mask from:(NSDate * _Nullable)from to:(NSDate * _Nullable)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Passed to handlers by <code>EventHistory</code> when Events are requested via <code>getEvents</code> API.
SWIFT_CLASS_NAMED("EventHistoryResult")
@interface AEPEventHistoryResult : NSObject
/// The number of occurrences in <code>EventHistory</code> of the <code>EventHistoryRequest</code> specified.
@property (nonatomic, readonly) NSInteger count;
/// A date representing the oldest occurrence of the event found in <code>EventHistory</code>.
/// If <code>count</code> == 0, this value will be nil.
@property (nonatomic, readonly, copy) NSDate * _Nullable oldestOccurrence;
/// A date representing the most recent occurrence of the event found in <code>EventHistory</code>.
/// If <code>count</code> == 0, this value will be nil.
@property (nonatomic, readonly, copy) NSDate * _Nullable newestOccurrence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the source from which an event originates
SWIFT_CLASS_NAMED("EventSource")
@interface AEPEventSource : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull none;)
+ (NSString * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull os;)
+ (NSString * _Nonnull)os SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestContent;)
+ (NSString * _Nonnull)requestContent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestIdentity;)
+ (NSString * _Nonnull)requestIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestProfile;)
+ (NSString * _Nonnull)requestProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestReset;)
+ (NSString * _Nonnull)requestReset SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseContent;)
+ (NSString * _Nonnull)responseContent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseIdentity;)
+ (NSString * _Nonnull)responseIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseProfile;)
+ (NSString * _Nonnull)responseProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sharedState;)
+ (NSString * _Nonnull)sharedState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notification;)
+ (NSString * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateConsent;)
+ (NSString * _Nonnull)updateConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateIdentity;)
+ (NSString * _Nonnull)updateIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeIdentity;)
+ (NSString * _Nonnull)removeIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wildcard;)
+ (NSString * _Nonnull)wildcard SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resetComplete;)
+ (NSString * _Nonnull)resetComplete SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applicationLaunch;)
+ (NSString * _Nonnull)applicationLaunch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applicationClose;)
+ (NSString * _Nonnull)applicationClose SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull personalizationDecisions;)
+ (NSString * _Nonnull)personalizationDecisions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents the type of an event
SWIFT_CLASS_NAMED("EventType")
@interface AEPEventType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull acquisition;)
+ (NSString * _Nonnull)acquisition SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull analytics;)
+ (NSString * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull audienceManager;)
+ (NSString * _Nonnull)audienceManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull campaign;)
+ (NSString * _Nonnull)campaign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull configuration;)
+ (NSString * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull custom;)
+ (NSString * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edge;)
+ (NSString * _Nonnull)edge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edgeConsent;)
+ (NSString * _Nonnull)edgeConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edgeIdentity;)
+ (NSString * _Nonnull)edgeIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericData;)
+ (NSString * _Nonnull)genericData SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericIdentity;)
+ (NSString * _Nonnull)genericIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericLifecycle;)
+ (NSString * _Nonnull)genericLifecycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericPii;)
+ (NSString * _Nonnull)genericPii SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericTrack;)
+ (NSString * _Nonnull)genericTrack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hub;)
+ (NSString * _Nonnull)hub SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identity;)
+ (NSString * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lifecycle;)
+ (NSString * _Nonnull)lifecycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull location;)
+ (NSString * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messaging;)
+ (NSString * _Nonnull)messaging SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offerDecisioning;)
+ (NSString * _Nonnull)offerDecisioning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull optimize;)
+ (NSString * _Nonnull)optimize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pii;)
+ (NSString * _Nonnull)pii SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull places;)
+ (NSString * _Nonnull)places SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rulesEngine;)
+ (NSString * _Nonnull)rulesEngine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull signal;)
+ (NSString * _Nonnull)signal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull system;)
+ (NSString * _Nonnull)system SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull target;)
+ (NSString * _Nonnull)target SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userProfile;)
+ (NSString * _Nonnull)userProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wildcard;)
+ (NSString * _Nonnull)wildcard SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AEPExtensionRuntime;

/// An object which can be registered with the <code>EventHub</code>
SWIFT_PROTOCOL_NAMED("Extension")
@protocol AEPExtension
/// Name of the extension
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// A friendly, human-readable name of the extension
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
/// Version of the extension
/// This variable is <code>static</code> so that it may be accessed from a <code>static</code> public API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
/// Optional metadata to be provided to the <code>EventHub</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Provides access to <code>ExtensionRuntime</code> methods that can be used by extension
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
/// Invoked when the extension has been registered by the <code>EventHub</code>
- (void)onRegistered;
/// Invoked when the extension has been unregistered by the <code>EventHub</code>
- (void)onUnregistered;
/// Called before each <code>Event</code> is processed by any <code>ExtensionListener</code> owned by this <code>Extension</code>
/// Should be overridden by any extension that wants to control its own <code>Event</code> flow on a per <code>Event</code> basis.
/// \param event event that will be processed next
///
///
/// returns:
/// <em>true</em> if event processing should continue for this <code>Extension</code>
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// An <code>Extension</code> must support parameterless initialization
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime;
@end

@class AEPSharedStateResult;

/// provides all the methods needed by an <code>Extension</code>
SWIFT_PROTOCOL_NAMED("ExtensionRuntime")
@protocol AEPExtensionRuntime
/// Unregisters this extension from the <code>EventHub</code>
- (void)unregisterExtension;
/// Registers an <code>EventListener</code> for the specified <code>EventType</code> and <code>EventSource</code>
/// \param type <code>EventType</code> to listen for
///
/// \param source <code>EventSource</code> to listen for
///
/// \param listener Function or closure which will be invoked whenever the <code>EventHub</code> receives an <code>Event</code> matching <code>type</code> and <code>source</code>
///
- (void)registerListenerWithType:(NSString * _Nonnull)type source:(NSString * _Nonnull)source listener:(void (^ _Nonnull)(AEPEvent * _Nonnull))listener;
/// Starts the <code>Event</code> queue for this extension
- (void)startEvents;
/// Stops the <code>Event</code> queue for this extension
- (void)stopEvents;
/// Dispatches an <code>Event</code> to the <code>EventHub</code>
/// \param event An <code>Event</code> to be dispatched to the <code>EventHub</code>
///
- (void)dispatchWithEvent:(AEPEvent * _Nonnull)event;
/// Creates a new <code>SharedState</code> for this extension
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param data Data for the <code>SharedState</code>
///
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
- (void)createSharedStateWithData:(NSDictionary<NSString *, id> * _Nonnull)data event:(AEPEvent * _Nullable)event;
/// Creates a pending <code>SharedState</code> versioned at <code>event</code>
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
///
/// returns:
/// a <code>SharedStateResolver</code> that should be called with the <code>SharedState</code> data when it is ready
- (void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))createPendingSharedStateWithEvent:(AEPEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Gets the <code>SharedState</code> data for a specified extension
/// \param extensionName An extension name whose <code>SharedState</code> will be returned
///
/// \param event If not nil, will retrieve the <code>SharedState</code> that corresponds with this event’s version or latest if not yet versioned. If event is nil will return the latest <code>SharedState</code>
///
/// \param barrier If true, the <code>EventHub</code> will only return <code>.set</code> if <code>extensionName</code> has moved past <code>event</code>
///
///
/// returns:
/// A <code>SharedStateResult?</code> for the requested <code>extensionName</code> and <code>event</code>
- (AEPSharedStateResult * _Nullable)getSharedStateWithExtensionName:(NSString * _Nonnull)extensionName event:(AEPEvent * _Nullable)event barrier:(BOOL)barrier SWIFT_WARN_UNUSED_RESULT;
/// Creates a new XDM SharedState for this extension.
/// The data passed to this API needs to be mapped to known XDM mixins; if an extension uses multiple mixins, the current data for all of them should be provided when the XDM shared state is set.
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param data Data for the <code>SharedState</code>
///
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
- (void)createXDMSharedStateWithData:(NSDictionary<NSString *, id> * _Nonnull)data event:(AEPEvent * _Nullable)event;
/// Creates a pending XDM <code>SharedState</code> versioned at <code>event</code>
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
///
/// returns:
/// a <code>SharedStateResolver</code> that should be called with the <code>SharedState</code> data when it is ready
- (void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))createPendingXDMSharedStateWithEvent:(AEPEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Gets the XDM SharedState data for a specified extension. If this extension populates multiple mixins in their shared state, all the data will be returned at once and it can be accessed using path discovery.
/// \param extensionName An extension name whose <code>SharedState</code> will be returned
///
/// \param event If not nil, will retrieve the <code>SharedState</code> that corresponds with the event’s version, if nil will return the latest <code>SharedState</code>
///
/// \param barrier If true, the <code>EventHub</code> will only return <code>.set</code> if <code>extensionName</code> has moved past <code>event</code>
///
///
/// returns:
/// A <code>SharedStateResult?</code> for the requested <code>extensionName</code> and <code>event</code>
- (AEPSharedStateResult * _Nullable)getXDMSharedStateWithExtensionName:(NSString * _Nonnull)extensionName event:(AEPEvent * _Nullable)event barrier:(BOOL)barrier SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a count of historical events matching the provided requests.
/// \param requests an array of <code>EventHistoryRequest</code>s used to generate the hash and timeframe for the event lookup
///
/// \param enforceOrder if <code>true</code>, consecutive lookups will use the oldest timestamp from the previous event as their
/// from date
///
/// \param handler contains an <code>EventHistoryResult</code> for each provided request
///
- (void)getHistoricalEvents:(NSArray<AEPEventHistoryRequest *> * _Nonnull)requests enforceOrder:(BOOL)enforceOrder handler:(void (^ _Nonnull)(NSArray<AEPEventHistoryResult *> * _Nonnull))handler;
@end

@protocol AEPMessagingDelegate;
@class NSData;
enum AEPWrapperType : NSInteger;

/// Core extension for the Adobe Experience Platform SDK
SWIFT_CLASS_NAMED("MobileCore")
@interface AEPMobileCore : NSObject
/// Current version of the Core extension
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <AEPMessagingDelegate> _Nullable messagingDelegate;)
+ (id <AEPMessagingDelegate> _Nullable)messagingDelegate SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE;
+ (void)setMessagingDelegate:(id <AEPMessagingDelegate> _Nullable)newValue;
/// Registers the extensions with Core and begins event processing
/// \param extensions The extensions to be registered
///
/// \param completion Closure to run when extensions have been registered
///
+ (void)registerExtensions:(NSArray<SWIFT_METATYPE(NSObject)> * _Nonnull)extensions completion:(void (^ _Nullable)(void))completion;
/// Registers the extension from MobileCore
/// \param exten The extension to be registered
///
+ (void)registerExtension:(Class <AEPExtension> _Nonnull)exten completion:(void (^ _Nullable)(void))completion;
/// Unregisters the extension from MobileCore
/// \param exten The extension to be unregistered
///
+ (void)unregisterExtension:(Class <AEPExtension> _Nonnull)exten completion:(void (^ _Nullable)(void))completion;
/// Fetches a list of registered extensions along with their respective versions
///
/// returns:
/// list of registered extensions along with their respective versions
+ (NSString * _Nonnull)getRegisteredExtensions SWIFT_WARN_UNUSED_RESULT;
/// Dispatches an <code>Event</code> through the <code>EventHub</code>
/// \param event The <code>Event</code> to be dispatched
///
+ (void)dispatch:(AEPEvent * _Nonnull)event;
/// Dispatches an <code>Event</code> through the <code>EventHub</code> and invokes a closure with the response <code>Event</code>.
/// \param event The trigger <code>Event</code> to be dispatched through the <code>EventHub</code>
///
/// \param timeout A timeout in seconds, if the response listener is not invoked within the timeout, then the <code>EventHub</code> invokes the response listener with a nil <code>Event</code>
///
/// \param responseCallback Callback to be invoked with <code>event</code>’s response <code>Event</code>
///
+ (void)dispatch:(AEPEvent * _Nonnull)event timeout:(NSTimeInterval)timeout responseCallback:(void (^ _Nonnull)(AEPEvent * _Nullable))responseCallback;
/// Registers an <code>EventListener</code> to perform on the global system queue (Qos = .default) which will be invoked whenever an event with matched type and source is dispatched.
/// \param type A <code>String</code> indicating the event type the current listener is listening for
///
/// \param source A <code>String</code> indicating the event source the current listener is listening for
///
/// \param listener An <code>EventResponseListener</code> which will be invoked whenever the <code>EventHub</code> receives an event with matched type and source.
///
+ (void)registerEventListenerWithType:(NSString * _Nonnull)type source:(NSString * _Nonnull)source listener:(void (^ _Nonnull)(AEPEvent * _Nonnull))listener;
/// Submits a generic event containing the provided IDFA with event type <code>generic.identity</code>.
/// \param identifier the advertising identifier string.
///
+ (void)setAdvertisingIdentifier:(NSString * _Nullable)identifier;
/// Submits a generic event containing the provided push token with event type <code>generic.identity</code>.
/// \param deviceToken the device token for push notifications
///
+ (void)setPushIdentifier:(NSData * _Nullable)deviceToken;
/// Sets the wrapper type for the SDK. Only applicable when being used in a cross platform environment such as React Native
/// \param type the <code>WrapperType</code> corresponding to the current platform
///
+ (void)setWrapperType:(enum AEPWrapperType)type;
/// Sets the logging level for the SDK
/// \param level The desired log level
///
+ (void)setLogLevel:(enum AEPLogLevel)level;
/// Sets the app group used to sharing user defaults and files among containing app and extension apps.
/// This must be called in AppDidFinishLaunching and before any other interactions with the Adobe Mobile library have happened.
/// \param group the app group name
///
+ (void)setAppGroup:(NSString * _Nullable)group;
/// For scenarios where the app is launched as a result of notification tap
/// \param messageInfo Dictionary of data relevant to the expected use case
///
+ (void)collectMessageInfo:(NSDictionary<NSString *, id> * _Nonnull)messageInfo;
/// For scenarios where the app is launched as a result of push message or deep link click-throughs
/// \param userInfo Dictionary of data relevant to the expected use case
///
+ (void)collectLaunchInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo;
/// Submits a generic PII collection request event with type <code>generic.pii</code>.
/// \param data a dictionary containing PII data
///
+ (void)collectPii:(NSDictionary<NSString *, id> * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Start a new lifecycle session or resume a previously paused lifecycle session. If a previously paused
/// session timed out, then a new session is created. If a current session is running, then calling this
/// method does nothing.
/// \param additionalContextData Optional additional context for this session.
///
+ (void)lifecycleStart:(NSDictionary<NSString *, id> * _Nullable)additionalContextData;
/// Pauses the current lifecycle session. Calling pause on an already paused session updates the paused timestamp,
/// having the effect of resetting the session timeout timer. If no lifecycle session is running,
/// then calling this method does nothing.
+ (void)lifecyclePause;
@end


@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Generates and dispatches a track action <code>Event</code>
/// \param action <code>String</code> representing the name of the action to be tracked
///
/// \param data Dictionary of data to attach to the dispatched <code>Event</code>
///
+ (void)trackAction:(NSString * _Nullable)action data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Generates and dispatches a track state <code>Event</code>
/// \param state <code>String</code> representing the name of the state to be tracked
///
/// \param data Dictionary of data to attach to the dispatched <code>Event</code>
///
+ (void)trackState:(NSString * _Nullable)state data:(NSDictionary<NSString *, id> * _Nullable)data;
@end

enum AEPPrivacyStatus : NSInteger;

@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Configure the SDK by downloading the remote configuration file hosted on Adobe servers
/// specified by the given application ID. The configuration file is cached once downloaded
/// and used in subsequent calls to this API. If the remote file is updated after the first
/// download, the updated file is downloaded and replaces the cached file.
/// \param appId A unique identifier assigned to the app instance by Adobe Launch
///
+ (void)configureWithAppId:(NSString * _Nonnull)appId;
/// Configure the SDK by reading a local file containing the JSON configuration. On application relaunch,
/// the configuration from the file at <code>filePath</code> is not preserved and this method must be called again if desired.
/// \param filePath Absolute path to a local configuration file.
///
+ (void)configureWithFilePath:(NSString * _Nonnull)filePath;
/// Update the current SDK configuration with specific key/value pairs. Keys not found in the current
/// configuration are added. Configuration updates are preserved and applied over existing or new
/// configuration even across application restarts.
/// Using <code>nil</code> values is allowed and effectively removes the configuration parameter from the current configuration.
/// \param configDict configuration key/value pairs to be updated or added.
///
+ (void)updateConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configDict;
/// Clears the changes made by <code>updateConfigurationWith(configDict:)</code> and <code>setPrivacyStatus(_:)</code> to the initial configuration
/// provided by either <code>configureWith(appId:)</code> or <code>configureWith(filePath:)</code>
+ (void)clearUpdatedConfiguration;
/// Sets the <code>PrivacyStatus</code> for this SDK. The set privacy status is preserved and applied over any new
/// configuration changes from calls to configureWithAppId or configureWithFileInPath,
/// even across application restarts.
/// \param status <code>PrivacyStatus</code> to be set for the SDK
///
+ (void)setPrivacyStatus:(enum AEPPrivacyStatus)status;
/// Gets the currently configured <code>PrivacyStatus</code> and returns it via <code>completion</code>
/// \param completion Invoked with the current <code>PrivacyStatus</code>
///
+ (void)getPrivacyStatus:(void (^ _Nonnull)(enum AEPPrivacyStatus))completion;
/// Get a JSON string containing all of the user’s identities known by the SDK  and calls a handler upon completion.
/// \param completion a closure that is invoked with a <code>String?</code> containing the SDK identities in JSON format and an <code>AEPError</code> if the request failed
///
+ (void)getSdkIdentities:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Clears all identifiers from Edge extensions and generates a new Experience Cloud ID (ECID).
+ (void)resetIdentities;
@end

/// An enum type representing the possible opt-out and privacy settings.
typedef SWIFT_ENUM_NAMED(NSInteger, AEPPrivacyStatus, "PrivacyStatus", open) {
  AEPPrivacyStatusOptedIn = 0,
  AEPPrivacyStatusOptedOut = 1,
  AEPPrivacyStatusUnknown = 2,
};

enum AEPSharedStateStatus : NSInteger;

/// Contains the status and value for a given shared state
SWIFT_CLASS_NAMED("SharedStateResult")
@interface AEPSharedStateResult : NSObject
@property (nonatomic, readonly) enum AEPSharedStateStatus status;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Type representing the state of an extension’s <code>SharedState</code>
typedef SWIFT_ENUM_NAMED(NSInteger, AEPSharedStateStatus, "SharedStateStatus", open) {
  AEPSharedStateStatusSet = 0,
  AEPSharedStateStatusPending = 1,
  AEPSharedStateStatusNone = 2,
};

/// An enum type representing the possible wrapper types
typedef SWIFT_ENUM_NAMED(NSInteger, AEPWrapperType, "WrapperType", open) {
  AEPWrapperTypeNone = 0,
  AEPWrapperTypeReactNative = 1,
  AEPWrapperTypeFlutter = 2,
  AEPWrapperTypeCordova = 3,
  AEPWrapperTypeUnity = 4,
  AEPWrapperTypeXamarin = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef AEPCORE_SWIFT_H
#define AEPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPServices;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// An enum which describes different errors from the AEP SDK can return
typedef SWIFT_ENUM(NSInteger, AEPError, open) {
  AEPErrorUnexpected = 0,
  AEPErrorCallbackTimeout = 1,
  AEPErrorCallbackNil = 2,
  AEPErrorNone = 3,
  AEPErrorServerError = 4,
  AEPErrorNetworkError = 5,
  AEPErrorInvalidRequest = 6,
  AEPErrorInvalidResponse = 7,
  AEPErrorErrorExtensionNotInitialized = 11,
};
static NSString * _Nonnull const AEPErrorDomain = @"AEPCore.AEPError";

@class NSString;
@class NSUUID;
@class NSDate;
@class NSNumber;

/// An Event to be dispatched by the Event Hub
SWIFT_CLASS_NAMED("Event")
@interface AEPEvent : NSObject
/// Name of the event
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// unique identifier for the event
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
/// The <code>EventType</code> for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The <code>EventSource</code> for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull source;
/// Optional data associated with this event
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
/// Date this event was created
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// If <code>responseID</code> is not nil, then this event is a response event and <code>responseID</code> is the <code>event.id</code> of the <code>triggerEvent</code>
@property (nonatomic, readonly, copy) NSUUID * _Nullable responseID;
/// Event description used for logging
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Specifies the properties in the Event and its <code>data</code> that should be used in the hash for <code>EventHistory</code> storage.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable mask;
/// A calculated hash that represents this Event as defined by its properties and the provided <code>mask</code>
@property (nonatomic) uint32_t eventHash;
/// Creates a new <code>Event</code> with the given parameters
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Creates a new <code>Event</code> with the given parameters
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
/// \param mask Defines which properties should be used in creation of the Event’s hash
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data mask:(NSArray<NSString *> * _Nullable)mask;
/// Creates a new <code>Event</code> where the <code>responseID</code> is equal to the <code>id</code> of this <code>Event</code>
/// \param name Name for the <code>Event</code>
///
/// \param type <code>EventType</code> for the <code>Event</code>
///
/// \param source <code>EventSource</code> for the <code>Event</code>
///
/// \param data Any associated data with this <code>Event</code>
///
- (AEPEvent * _Nonnull)responseEventWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type source:(NSString * _Nonnull)source data:(NSDictionary<NSString *, id> * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Used for selecting or deleting Events from Event History.
SWIFT_CLASS_NAMED("EventHistoryRequest")
@interface AEPEventHistoryRequest : NSObject
/// Key-value pairs that will be used to generate the hash when looking up an Event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull mask;
/// Date that represents the lower bounds of the date range used when looking up an Event.
/// If not provided, the lookup will use the beginning of Event History as the lower bounds.
@property (nonatomic, readonly, copy) NSDate * _Nullable fromDate;
/// Date that represents the upper bounds of the date range used when looking up an Event.
/// If not provided, there will be no upper bound on the date range.
@property (nonatomic, readonly, copy) NSDate * _Nullable toDate;
/// Initialize an <code>EventHistoryRequest</code> object.
/// \param mask Key-value pairs that will be used to generate the hash when looking up an Event
///
/// \param from Date that represents the lower bounds of the date range used when looking up an Event
///
/// \param to Date that represents the upper bounds of the date range used when looking up an Event
///
- (nonnull instancetype)initWithMask:(NSDictionary<NSString *, id> * _Nonnull)mask from:(NSDate * _Nullable)from to:(NSDate * _Nullable)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Passed to handlers by <code>EventHistory</code> when Events are requested via <code>getEvents</code> API.
SWIFT_CLASS_NAMED("EventHistoryResult")
@interface AEPEventHistoryResult : NSObject
/// The number of occurrences in <code>EventHistory</code> of the <code>EventHistoryRequest</code> specified.
@property (nonatomic, readonly) NSInteger count;
/// A date representing the oldest occurrence of the event found in <code>EventHistory</code>.
/// If <code>count</code> == 0, this value will be nil.
@property (nonatomic, readonly, copy) NSDate * _Nullable oldestOccurrence;
/// A date representing the most recent occurrence of the event found in <code>EventHistory</code>.
/// If <code>count</code> == 0, this value will be nil.
@property (nonatomic, readonly, copy) NSDate * _Nullable newestOccurrence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the source from which an event originates
SWIFT_CLASS_NAMED("EventSource")
@interface AEPEventSource : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull none;)
+ (NSString * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull os;)
+ (NSString * _Nonnull)os SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestContent;)
+ (NSString * _Nonnull)requestContent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestIdentity;)
+ (NSString * _Nonnull)requestIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestProfile;)
+ (NSString * _Nonnull)requestProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestReset;)
+ (NSString * _Nonnull)requestReset SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseContent;)
+ (NSString * _Nonnull)responseContent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseIdentity;)
+ (NSString * _Nonnull)responseIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull responseProfile;)
+ (NSString * _Nonnull)responseProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sharedState;)
+ (NSString * _Nonnull)sharedState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notification;)
+ (NSString * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateConsent;)
+ (NSString * _Nonnull)updateConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateIdentity;)
+ (NSString * _Nonnull)updateIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeIdentity;)
+ (NSString * _Nonnull)removeIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wildcard;)
+ (NSString * _Nonnull)wildcard SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resetComplete;)
+ (NSString * _Nonnull)resetComplete SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applicationLaunch;)
+ (NSString * _Nonnull)applicationLaunch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applicationClose;)
+ (NSString * _Nonnull)applicationClose SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull personalizationDecisions;)
+ (NSString * _Nonnull)personalizationDecisions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents the type of an event
SWIFT_CLASS_NAMED("EventType")
@interface AEPEventType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull acquisition;)
+ (NSString * _Nonnull)acquisition SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull analytics;)
+ (NSString * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull audienceManager;)
+ (NSString * _Nonnull)audienceManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull campaign;)
+ (NSString * _Nonnull)campaign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull configuration;)
+ (NSString * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull custom;)
+ (NSString * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edge;)
+ (NSString * _Nonnull)edge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edgeConsent;)
+ (NSString * _Nonnull)edgeConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull edgeIdentity;)
+ (NSString * _Nonnull)edgeIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericData;)
+ (NSString * _Nonnull)genericData SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericIdentity;)
+ (NSString * _Nonnull)genericIdentity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericLifecycle;)
+ (NSString * _Nonnull)genericLifecycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericPii;)
+ (NSString * _Nonnull)genericPii SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genericTrack;)
+ (NSString * _Nonnull)genericTrack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hub;)
+ (NSString * _Nonnull)hub SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identity;)
+ (NSString * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lifecycle;)
+ (NSString * _Nonnull)lifecycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull location;)
+ (NSString * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messaging;)
+ (NSString * _Nonnull)messaging SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offerDecisioning;)
+ (NSString * _Nonnull)offerDecisioning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull optimize;)
+ (NSString * _Nonnull)optimize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pii;)
+ (NSString * _Nonnull)pii SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull places;)
+ (NSString * _Nonnull)places SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rulesEngine;)
+ (NSString * _Nonnull)rulesEngine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull signal;)
+ (NSString * _Nonnull)signal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull system;)
+ (NSString * _Nonnull)system SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull target;)
+ (NSString * _Nonnull)target SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userProfile;)
+ (NSString * _Nonnull)userProfile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wildcard;)
+ (NSString * _Nonnull)wildcard SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AEPExtensionRuntime;

/// An object which can be registered with the <code>EventHub</code>
SWIFT_PROTOCOL_NAMED("Extension")
@protocol AEPExtension
/// Name of the extension
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// A friendly, human-readable name of the extension
@property (nonatomic, readonly, copy) NSString * _Nonnull friendlyName;
/// Version of the extension
/// This variable is <code>static</code> so that it may be accessed from a <code>static</code> public API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
/// Optional metadata to be provided to the <code>EventHub</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Provides access to <code>ExtensionRuntime</code> methods that can be used by extension
@property (nonatomic, readonly, strong) id <AEPExtensionRuntime> _Nonnull runtime;
/// Invoked when the extension has been registered by the <code>EventHub</code>
- (void)onRegistered;
/// Invoked when the extension has been unregistered by the <code>EventHub</code>
- (void)onUnregistered;
/// Called before each <code>Event</code> is processed by any <code>ExtensionListener</code> owned by this <code>Extension</code>
/// Should be overridden by any extension that wants to control its own <code>Event</code> flow on a per <code>Event</code> basis.
/// \param event event that will be processed next
///
///
/// returns:
/// <em>true</em> if event processing should continue for this <code>Extension</code>
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// An <code>Extension</code> must support parameterless initialization
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime;
@end

@class AEPSharedStateResult;

/// provides all the methods needed by an <code>Extension</code>
SWIFT_PROTOCOL_NAMED("ExtensionRuntime")
@protocol AEPExtensionRuntime
/// Unregisters this extension from the <code>EventHub</code>
- (void)unregisterExtension;
/// Registers an <code>EventListener</code> for the specified <code>EventType</code> and <code>EventSource</code>
/// \param type <code>EventType</code> to listen for
///
/// \param source <code>EventSource</code> to listen for
///
/// \param listener Function or closure which will be invoked whenever the <code>EventHub</code> receives an <code>Event</code> matching <code>type</code> and <code>source</code>
///
- (void)registerListenerWithType:(NSString * _Nonnull)type source:(NSString * _Nonnull)source listener:(void (^ _Nonnull)(AEPEvent * _Nonnull))listener;
/// Starts the <code>Event</code> queue for this extension
- (void)startEvents;
/// Stops the <code>Event</code> queue for this extension
- (void)stopEvents;
/// Dispatches an <code>Event</code> to the <code>EventHub</code>
/// \param event An <code>Event</code> to be dispatched to the <code>EventHub</code>
///
- (void)dispatchWithEvent:(AEPEvent * _Nonnull)event;
/// Creates a new <code>SharedState</code> for this extension
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param data Data for the <code>SharedState</code>
///
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
- (void)createSharedStateWithData:(NSDictionary<NSString *, id> * _Nonnull)data event:(AEPEvent * _Nullable)event;
/// Creates a pending <code>SharedState</code> versioned at <code>event</code>
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
///
/// returns:
/// a <code>SharedStateResolver</code> that should be called with the <code>SharedState</code> data when it is ready
- (void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))createPendingSharedStateWithEvent:(AEPEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Gets the <code>SharedState</code> data for a specified extension
/// \param extensionName An extension name whose <code>SharedState</code> will be returned
///
/// \param event If not nil, will retrieve the <code>SharedState</code> that corresponds with this event’s version or latest if not yet versioned. If event is nil will return the latest <code>SharedState</code>
///
/// \param barrier If true, the <code>EventHub</code> will only return <code>.set</code> if <code>extensionName</code> has moved past <code>event</code>
///
///
/// returns:
/// A <code>SharedStateResult?</code> for the requested <code>extensionName</code> and <code>event</code>
- (AEPSharedStateResult * _Nullable)getSharedStateWithExtensionName:(NSString * _Nonnull)extensionName event:(AEPEvent * _Nullable)event barrier:(BOOL)barrier SWIFT_WARN_UNUSED_RESULT;
/// Creates a new XDM SharedState for this extension.
/// The data passed to this API needs to be mapped to known XDM mixins; if an extension uses multiple mixins, the current data for all of them should be provided when the XDM shared state is set.
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param data Data for the <code>SharedState</code>
///
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
- (void)createXDMSharedStateWithData:(NSDictionary<NSString *, id> * _Nonnull)data event:(AEPEvent * _Nullable)event;
/// Creates a pending XDM <code>SharedState</code> versioned at <code>event</code>
/// If <code>event</code> is nil, one of two behaviors will be observed:
/// <ol>
///   <li>
///     If this extension has not previously published a shared state, shared state will be versioned at 0
///   </li>
///   <li>
///     If this extension has previously published a shared state, shared state will be versioned at the latest
///   </li>
/// </ol>
/// \param event <code>Event</code> for which the <code>SharedState</code> should be versioned
///
///
/// returns:
/// a <code>SharedStateResolver</code> that should be called with the <code>SharedState</code> data when it is ready
- (void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))createPendingXDMSharedStateWithEvent:(AEPEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Gets the XDM SharedState data for a specified extension. If this extension populates multiple mixins in their shared state, all the data will be returned at once and it can be accessed using path discovery.
/// \param extensionName An extension name whose <code>SharedState</code> will be returned
///
/// \param event If not nil, will retrieve the <code>SharedState</code> that corresponds with the event’s version, if nil will return the latest <code>SharedState</code>
///
/// \param barrier If true, the <code>EventHub</code> will only return <code>.set</code> if <code>extensionName</code> has moved past <code>event</code>
///
///
/// returns:
/// A <code>SharedStateResult?</code> for the requested <code>extensionName</code> and <code>event</code>
- (AEPSharedStateResult * _Nullable)getXDMSharedStateWithExtensionName:(NSString * _Nonnull)extensionName event:(AEPEvent * _Nullable)event barrier:(BOOL)barrier SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a count of historical events matching the provided requests.
/// \param requests an array of <code>EventHistoryRequest</code>s used to generate the hash and timeframe for the event lookup
///
/// \param enforceOrder if <code>true</code>, consecutive lookups will use the oldest timestamp from the previous event as their
/// from date
///
/// \param handler contains an <code>EventHistoryResult</code> for each provided request
///
- (void)getHistoricalEvents:(NSArray<AEPEventHistoryRequest *> * _Nonnull)requests enforceOrder:(BOOL)enforceOrder handler:(void (^ _Nonnull)(NSArray<AEPEventHistoryResult *> * _Nonnull))handler;
@end

@protocol AEPMessagingDelegate;
@class NSData;
enum AEPWrapperType : NSInteger;

/// Core extension for the Adobe Experience Platform SDK
SWIFT_CLASS_NAMED("MobileCore")
@interface AEPMobileCore : NSObject
/// Current version of the Core extension
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <AEPMessagingDelegate> _Nullable messagingDelegate;)
+ (id <AEPMessagingDelegate> _Nullable)messagingDelegate SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE;
+ (void)setMessagingDelegate:(id <AEPMessagingDelegate> _Nullable)newValue;
/// Registers the extensions with Core and begins event processing
/// \param extensions The extensions to be registered
///
/// \param completion Closure to run when extensions have been registered
///
+ (void)registerExtensions:(NSArray<SWIFT_METATYPE(NSObject)> * _Nonnull)extensions completion:(void (^ _Nullable)(void))completion;
/// Registers the extension from MobileCore
/// \param exten The extension to be registered
///
+ (void)registerExtension:(Class <AEPExtension> _Nonnull)exten completion:(void (^ _Nullable)(void))completion;
/// Unregisters the extension from MobileCore
/// \param exten The extension to be unregistered
///
+ (void)unregisterExtension:(Class <AEPExtension> _Nonnull)exten completion:(void (^ _Nullable)(void))completion;
/// Fetches a list of registered extensions along with their respective versions
///
/// returns:
/// list of registered extensions along with their respective versions
+ (NSString * _Nonnull)getRegisteredExtensions SWIFT_WARN_UNUSED_RESULT;
/// Dispatches an <code>Event</code> through the <code>EventHub</code>
/// \param event The <code>Event</code> to be dispatched
///
+ (void)dispatch:(AEPEvent * _Nonnull)event;
/// Dispatches an <code>Event</code> through the <code>EventHub</code> and invokes a closure with the response <code>Event</code>.
/// \param event The trigger <code>Event</code> to be dispatched through the <code>EventHub</code>
///
/// \param timeout A timeout in seconds, if the response listener is not invoked within the timeout, then the <code>EventHub</code> invokes the response listener with a nil <code>Event</code>
///
/// \param responseCallback Callback to be invoked with <code>event</code>’s response <code>Event</code>
///
+ (void)dispatch:(AEPEvent * _Nonnull)event timeout:(NSTimeInterval)timeout responseCallback:(void (^ _Nonnull)(AEPEvent * _Nullable))responseCallback;
/// Registers an <code>EventListener</code> to perform on the global system queue (Qos = .default) which will be invoked whenever an event with matched type and source is dispatched.
/// \param type A <code>String</code> indicating the event type the current listener is listening for
///
/// \param source A <code>String</code> indicating the event source the current listener is listening for
///
/// \param listener An <code>EventResponseListener</code> which will be invoked whenever the <code>EventHub</code> receives an event with matched type and source.
///
+ (void)registerEventListenerWithType:(NSString * _Nonnull)type source:(NSString * _Nonnull)source listener:(void (^ _Nonnull)(AEPEvent * _Nonnull))listener;
/// Submits a generic event containing the provided IDFA with event type <code>generic.identity</code>.
/// \param identifier the advertising identifier string.
///
+ (void)setAdvertisingIdentifier:(NSString * _Nullable)identifier;
/// Submits a generic event containing the provided push token with event type <code>generic.identity</code>.
/// \param deviceToken the device token for push notifications
///
+ (void)setPushIdentifier:(NSData * _Nullable)deviceToken;
/// Sets the wrapper type for the SDK. Only applicable when being used in a cross platform environment such as React Native
/// \param type the <code>WrapperType</code> corresponding to the current platform
///
+ (void)setWrapperType:(enum AEPWrapperType)type;
/// Sets the logging level for the SDK
/// \param level The desired log level
///
+ (void)setLogLevel:(enum AEPLogLevel)level;
/// Sets the app group used to sharing user defaults and files among containing app and extension apps.
/// This must be called in AppDidFinishLaunching and before any other interactions with the Adobe Mobile library have happened.
/// \param group the app group name
///
+ (void)setAppGroup:(NSString * _Nullable)group;
/// For scenarios where the app is launched as a result of notification tap
/// \param messageInfo Dictionary of data relevant to the expected use case
///
+ (void)collectMessageInfo:(NSDictionary<NSString *, id> * _Nonnull)messageInfo;
/// For scenarios where the app is launched as a result of push message or deep link click-throughs
/// \param userInfo Dictionary of data relevant to the expected use case
///
+ (void)collectLaunchInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo;
/// Submits a generic PII collection request event with type <code>generic.pii</code>.
/// \param data a dictionary containing PII data
///
+ (void)collectPii:(NSDictionary<NSString *, id> * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Start a new lifecycle session or resume a previously paused lifecycle session. If a previously paused
/// session timed out, then a new session is created. If a current session is running, then calling this
/// method does nothing.
/// \param additionalContextData Optional additional context for this session.
///
+ (void)lifecycleStart:(NSDictionary<NSString *, id> * _Nullable)additionalContextData;
/// Pauses the current lifecycle session. Calling pause on an already paused session updates the paused timestamp,
/// having the effect of resetting the session timeout timer. If no lifecycle session is running,
/// then calling this method does nothing.
+ (void)lifecyclePause;
@end


@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Generates and dispatches a track action <code>Event</code>
/// \param action <code>String</code> representing the name of the action to be tracked
///
/// \param data Dictionary of data to attach to the dispatched <code>Event</code>
///
+ (void)trackAction:(NSString * _Nullable)action data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Generates and dispatches a track state <code>Event</code>
/// \param state <code>String</code> representing the name of the state to be tracked
///
/// \param data Dictionary of data to attach to the dispatched <code>Event</code>
///
+ (void)trackState:(NSString * _Nullable)state data:(NSDictionary<NSString *, id> * _Nullable)data;
@end

enum AEPPrivacyStatus : NSInteger;

@interface AEPMobileCore (SWIFT_EXTENSION(AEPCore))
/// Configure the SDK by downloading the remote configuration file hosted on Adobe servers
/// specified by the given application ID. The configuration file is cached once downloaded
/// and used in subsequent calls to this API. If the remote file is updated after the first
/// download, the updated file is downloaded and replaces the cached file.
/// \param appId A unique identifier assigned to the app instance by Adobe Launch
///
+ (void)configureWithAppId:(NSString * _Nonnull)appId;
/// Configure the SDK by reading a local file containing the JSON configuration. On application relaunch,
/// the configuration from the file at <code>filePath</code> is not preserved and this method must be called again if desired.
/// \param filePath Absolute path to a local configuration file.
///
+ (void)configureWithFilePath:(NSString * _Nonnull)filePath;
/// Update the current SDK configuration with specific key/value pairs. Keys not found in the current
/// configuration are added. Configuration updates are preserved and applied over existing or new
/// configuration even across application restarts.
/// Using <code>nil</code> values is allowed and effectively removes the configuration parameter from the current configuration.
/// \param configDict configuration key/value pairs to be updated or added.
///
+ (void)updateConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configDict;
/// Clears the changes made by <code>updateConfigurationWith(configDict:)</code> and <code>setPrivacyStatus(_:)</code> to the initial configuration
/// provided by either <code>configureWith(appId:)</code> or <code>configureWith(filePath:)</code>
+ (void)clearUpdatedConfiguration;
/// Sets the <code>PrivacyStatus</code> for this SDK. The set privacy status is preserved and applied over any new
/// configuration changes from calls to configureWithAppId or configureWithFileInPath,
/// even across application restarts.
/// \param status <code>PrivacyStatus</code> to be set for the SDK
///
+ (void)setPrivacyStatus:(enum AEPPrivacyStatus)status;
/// Gets the currently configured <code>PrivacyStatus</code> and returns it via <code>completion</code>
/// \param completion Invoked with the current <code>PrivacyStatus</code>
///
+ (void)getPrivacyStatus:(void (^ _Nonnull)(enum AEPPrivacyStatus))completion;
/// Get a JSON string containing all of the user’s identities known by the SDK  and calls a handler upon completion.
/// \param completion a closure that is invoked with a <code>String?</code> containing the SDK identities in JSON format and an <code>AEPError</code> if the request failed
///
+ (void)getSdkIdentities:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Clears all identifiers from Edge extensions and generates a new Experience Cloud ID (ECID).
+ (void)resetIdentities;
@end

/// An enum type representing the possible opt-out and privacy settings.
typedef SWIFT_ENUM_NAMED(NSInteger, AEPPrivacyStatus, "PrivacyStatus", open) {
  AEPPrivacyStatusOptedIn = 0,
  AEPPrivacyStatusOptedOut = 1,
  AEPPrivacyStatusUnknown = 2,
};

enum AEPSharedStateStatus : NSInteger;

/// Contains the status and value for a given shared state
SWIFT_CLASS_NAMED("SharedStateResult")
@interface AEPSharedStateResult : NSObject
@property (nonatomic, readonly) enum AEPSharedStateStatus status;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Type representing the state of an extension’s <code>SharedState</code>
typedef SWIFT_ENUM_NAMED(NSInteger, AEPSharedStateStatus, "SharedStateStatus", open) {
  AEPSharedStateStatusSet = 0,
  AEPSharedStateStatusPending = 1,
  AEPSharedStateStatusNone = 2,
};

/// An enum type representing the possible wrapper types
typedef SWIFT_ENUM_NAMED(NSInteger, AEPWrapperType, "WrapperType", open) {
  AEPWrapperTypeNone = 0,
  AEPWrapperTypeReactNative = 1,
  AEPWrapperTypeFlutter = 2,
  AEPWrapperTypeCordova = 3,
  AEPWrapperTypeUnity = 4,
  AEPWrapperTypeXamarin = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
